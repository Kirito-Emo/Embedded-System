
Codice Matlab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037dc  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080039b8  080039b8  000049b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039d8  080039d8  0000505c  2**0
                  CONTENTS
  4 .ARM          00000000  080039d8  080039d8  0000505c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039d8  080039d8  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039d8  080039d8  000049d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080039dc  080039dc  000049dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080039e0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000060  08003a3c  00005060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08003a3c  00005268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005244  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000150f  00000000  00000000  0000a2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000670  00000000  00000000  0000b7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004b4  00000000  00000000  0000be50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023fdd  00000000  00000000  0000c304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000073e7  00000000  00000000  000302e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2fbe  00000000  00000000  000376c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011a686  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bd8  00000000  00000000  0011a6cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009c  00000000  00000000  0011c2a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000060 	.word	0x20000060
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800399c 	.word	0x0800399c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000064 	.word	0x20000064
 8000214:	0800399c 	.word	0x0800399c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <rtGetNaN>:
/*
 * Initialize rtNaN needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
static real_T rtGetNaN(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8000bd6:	2340      	movs	r3, #64	@ 0x40
 8000bd8:	60fb      	str	r3, [r7, #12]
  real_T nan = 0.0;
 8000bda:	f04f 0200 	mov.w	r2, #0
 8000bde:	f04f 0300 	mov.w	r3, #0
 8000be2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	2b20      	cmp	r3, #32
 8000bea:	d10b      	bne.n	8000c04 <rtGetNaN+0x34>
    nan = rtGetNaNF();
 8000bec:	f000 f820 	bl	8000c30 <rtGetNaNF>
 8000bf0:	ee10 3a10 	vmov	r3, s0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff fc73 	bl	80004e0 <__aeabi_f2d>
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000c02:	e007      	b.n	8000c14 <rtGetNaN+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF80000U;
 8000c04:	4b09      	ldr	r3, [pc, #36]	@ (8000c2c <rtGetNaN+0x5c>)
 8000c06:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	603b      	str	r3, [r7, #0]
    nan = tmpVal.fltVal;
 8000c0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000c10:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return nan;
 8000c14:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000c18:	ec43 2b17 	vmov	d7, r2, r3
}
 8000c1c:	eeb0 0a47 	vmov.f32	s0, s14
 8000c20:	eef0 0a67 	vmov.f32	s1, s15
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	fff80000 	.word	0xfff80000

08000c30 <rtGetNaNF>:
/*
 * Initialize rtNaNF needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
static real32_T rtGetNaNF(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0.0F } };
 8000c36:	f04f 0300 	mov.w	r3, #0
 8000c3a:	607b      	str	r3, [r7, #4]

  nanF.wordL.wordLuint = 0xFFC00000U;
 8000c3c:	4b05      	ldr	r3, [pc, #20]	@ (8000c54 <rtGetNaNF+0x24>)
 8000c3e:	607b      	str	r3, [r7, #4]
  return nanF.wordL.wordLreal;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	ee07 3a90 	vmov	s15, r3
}
 8000c46:	eeb0 0a67 	vmov.f32	s0, s15
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	ffc00000 	.word	0xffc00000

08000c58 <rt_InitInfAndNaN>:
/*
 * Initialize the rtInf, rtMinusInf, and rtNaN needed by the
 * generated code. NaN is initialized as non-signaling. Assumes IEEE.
 */
static void rt_InitInfAndNaN(size_t realSize)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 8000c60:	f7ff ffb6 	bl	8000bd0 <rtGetNaN>
 8000c64:	eeb0 7a40 	vmov.f32	s14, s0
 8000c68:	eef0 7a60 	vmov.f32	s15, s1
 8000c6c:	4b16      	ldr	r3, [pc, #88]	@ (8000cc8 <rt_InitInfAndNaN+0x70>)
 8000c6e:	ed83 7b00 	vstr	d7, [r3]
  rtNaNF = rtGetNaNF();
 8000c72:	f7ff ffdd 	bl	8000c30 <rtGetNaNF>
 8000c76:	eef0 7a40 	vmov.f32	s15, s0
 8000c7a:	4b14      	ldr	r3, [pc, #80]	@ (8000ccc <rt_InitInfAndNaN+0x74>)
 8000c7c:	edc3 7a00 	vstr	s15, [r3]
  rtInf = rtGetInf();
 8000c80:	f000 f8a4 	bl	8000dcc <rtGetInf>
 8000c84:	eeb0 7a40 	vmov.f32	s14, s0
 8000c88:	eef0 7a60 	vmov.f32	s15, s1
 8000c8c:	4b10      	ldr	r3, [pc, #64]	@ (8000cd0 <rt_InitInfAndNaN+0x78>)
 8000c8e:	ed83 7b00 	vstr	d7, [r3]
  rtInfF = rtGetInfF();
 8000c92:	f000 f8cb 	bl	8000e2c <rtGetInfF>
 8000c96:	eef0 7a40 	vmov.f32	s15, s0
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd4 <rt_InitInfAndNaN+0x7c>)
 8000c9c:	edc3 7a00 	vstr	s15, [r3]
  rtMinusInf = rtGetMinusInf();
 8000ca0:	f000 f8d4 	bl	8000e4c <rtGetMinusInf>
 8000ca4:	eeb0 7a40 	vmov.f32	s14, s0
 8000ca8:	eef0 7a60 	vmov.f32	s15, s1
 8000cac:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd8 <rt_InitInfAndNaN+0x80>)
 8000cae:	ed83 7b00 	vstr	d7, [r3]
  rtMinusInfF = rtGetMinusInfF();
 8000cb2:	f000 f8fb 	bl	8000eac <rtGetMinusInfF>
 8000cb6:	eef0 7a40 	vmov.f32	s15, s0
 8000cba:	4b08      	ldr	r3, [pc, #32]	@ (8000cdc <rt_InitInfAndNaN+0x84>)
 8000cbc:	edc3 7a00 	vstr	s15, [r3]
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000118 	.word	0x20000118
 8000ccc:	20000128 	.word	0x20000128
 8000cd0:	20000108 	.word	0x20000108
 8000cd4:	20000120 	.word	0x20000120
 8000cd8:	20000110 	.word	0x20000110
 8000cdc:	20000124 	.word	0x20000124

08000ce0 <rtIsInf>:

/* Test if value is infinite */
static boolean_T rtIsInf(real_T value)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	ed87 0b00 	vstr	d0, [r7]
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 8000cea:	4b0d      	ldr	r3, [pc, #52]	@ (8000d20 <rtIsInf+0x40>)
 8000cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000cf4:	f7ff feb4 	bl	8000a60 <__aeabi_dcmpeq>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d109      	bne.n	8000d12 <rtIsInf+0x32>
 8000cfe:	4b09      	ldr	r3, [pc, #36]	@ (8000d24 <rtIsInf+0x44>)
 8000d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000d08:	f7ff feaa 	bl	8000a60 <__aeabi_dcmpeq>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <rtIsInf+0x36>
 8000d12:	2301      	movs	r3, #1
 8000d14:	e000      	b.n	8000d18 <rtIsInf+0x38>
 8000d16:	2300      	movs	r3, #0
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000108 	.word	0x20000108
 8000d24:	20000110 	.word	0x20000110

08000d28 <rtIsNaN>:
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

/* Test if value is not a number */
static boolean_T rtIsNaN(real_T value)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	ed87 0b00 	vstr	d0, [r7]
  boolean_T result = (boolean_T) 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	75fb      	strb	r3, [r7, #23]
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8000d36:	2340      	movs	r3, #64	@ 0x40
 8000d38:	613b      	str	r3, [r7, #16]
  if (bitsPerReal == 32U) {
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	2b20      	cmp	r3, #32
 8000d3e:	d10b      	bne.n	8000d58 <rtIsNaN+0x30>
    result = rtIsNaNF((real32_T)value);
 8000d40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000d44:	f7ff fef4 	bl	8000b30 <__aeabi_d2f>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	ee00 3a10 	vmov	s0, r3
 8000d4e:	f000 f821 	bl	8000d94 <rtIsNaNF>
 8000d52:	4603      	mov	r3, r0
 8000d54:	75fb      	strb	r3, [r7, #23]
 8000d56:	e015      	b.n	8000d84 <rtIsNaN+0x5c>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.fltVal = value;
 8000d58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d5c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 8000d60:	68fa      	ldr	r2, [r7, #12]
 8000d62:	4b0b      	ldr	r3, [pc, #44]	@ (8000d90 <rtIsNaN+0x68>)
 8000d64:	4013      	ands	r3, r2
 8000d66:	4a0a      	ldr	r2, [pc, #40]	@ (8000d90 <rtIsNaN+0x68>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d109      	bne.n	8000d80 <rtIsNaN+0x58>
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d102      	bne.n	8000d7c <rtIsNaN+0x54>
                          (tmpVal.bitVal.words.wordL != 0) ));
 8000d76:	68bb      	ldr	r3, [r7, #8]
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <rtIsNaN+0x58>
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e000      	b.n	8000d82 <rtIsNaN+0x5a>
 8000d80:	2300      	movs	r3, #0
 8000d82:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 8000d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	7ff00000 	.word	0x7ff00000

08000d94 <rtIsNaNF>:

/* Test if single-precision value is not a number */
static boolean_T rtIsNaNF(real32_T value)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	ed87 0a01 	vstr	s0, [r7, #4]
  IEEESingle tmp;
  tmp.wordL.wordLreal = value;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	60fb      	str	r3, [r7, #12]
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	f003 43ff 	and.w	r3, r3, #2139095040	@ 0x7f800000
 8000da8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8000dac:	d106      	bne.n	8000dbc <rtIsNaNF+0x28>
                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	f3c3 0316 	ubfx	r3, r3, #0, #23
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <rtIsNaNF+0x28>
 8000db8:	2301      	movs	r3, #1
 8000dba:	e000      	b.n	8000dbe <rtIsNaNF+0x2a>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	b2db      	uxtb	r3, r3
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <rtGetInf>:
/*
 * Initialize rtInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
static real_T rtGetInf(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8000dd2:	2340      	movs	r3, #64	@ 0x40
 8000dd4:	60fb      	str	r3, [r7, #12]
  real_T inf = 0.0;
 8000dd6:	f04f 0200 	mov.w	r2, #0
 8000dda:	f04f 0300 	mov.w	r3, #0
 8000dde:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	2b20      	cmp	r3, #32
 8000de6:	d10b      	bne.n	8000e00 <rtGetInf+0x34>
    inf = rtGetInfF();
 8000de8:	f000 f820 	bl	8000e2c <rtGetInfF>
 8000dec:	ee10 3a10 	vmov	r3, s0
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fb75 	bl	80004e0 <__aeabi_f2d>
 8000df6:	4602      	mov	r2, r0
 8000df8:	460b      	mov	r3, r1
 8000dfa:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000dfe:	e007      	b.n	8000e10 <rtGetInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0x7FF00000U;
 8000e00:	4b09      	ldr	r3, [pc, #36]	@ (8000e28 <rtGetInf+0x5c>)
 8000e02:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 8000e04:	2300      	movs	r3, #0
 8000e06:	603b      	str	r3, [r7, #0]
    inf = tmpVal.fltVal;
 8000e08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return inf;
 8000e10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000e14:	ec43 2b17 	vmov	d7, r2, r3
}
 8000e18:	eeb0 0a47 	vmov.f32	s0, s14
 8000e1c:	eef0 0a67 	vmov.f32	s1, s15
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	7ff00000 	.word	0x7ff00000

08000e2c <rtGetInfF>:
/*
 * Initialize rtInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
static real32_T rtGetInfF(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 8000e32:	f04f 43ff 	mov.w	r3, #2139095040	@ 0x7f800000
 8000e36:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	ee07 3a90 	vmov	s15, r3
}
 8000e3e:	eeb0 0a67 	vmov.f32	s0, s15
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <rtGetMinusInf>:
/*
 * Initialize rtMinusInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
static real_T rtGetMinusInf(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8000e52:	2340      	movs	r3, #64	@ 0x40
 8000e54:	60fb      	str	r3, [r7, #12]
  real_T minf = 0.0;
 8000e56:	f04f 0200 	mov.w	r2, #0
 8000e5a:	f04f 0300 	mov.w	r3, #0
 8000e5e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	2b20      	cmp	r3, #32
 8000e66:	d10b      	bne.n	8000e80 <rtGetMinusInf+0x34>
    minf = rtGetMinusInfF();
 8000e68:	f000 f820 	bl	8000eac <rtGetMinusInfF>
 8000e6c:	ee10 3a10 	vmov	r3, s0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fb35 	bl	80004e0 <__aeabi_f2d>
 8000e76:	4602      	mov	r2, r0
 8000e78:	460b      	mov	r3, r1
 8000e7a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000e7e:	e007      	b.n	8000e90 <rtGetMinusInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF00000U;
 8000e80:	4b09      	ldr	r3, [pc, #36]	@ (8000ea8 <rtGetMinusInf+0x5c>)
 8000e82:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 8000e84:	2300      	movs	r3, #0
 8000e86:	603b      	str	r3, [r7, #0]
    minf = tmpVal.fltVal;
 8000e88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return minf;
 8000e90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000e94:	ec43 2b17 	vmov	d7, r2, r3
}
 8000e98:	eeb0 0a47 	vmov.f32	s0, s14
 8000e9c:	eef0 0a67 	vmov.f32	s1, s15
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	fff00000 	.word	0xfff00000

08000eac <rtGetMinusInfF>:
/*
 * Initialize rtMinusInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
static real32_T rtGetMinusInfF(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 8000eb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <rtGetMinusInfF+0x20>)
 8000eb4:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	ee07 3a90 	vmov	s15, r3
}
 8000ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	ff800000 	.word	0xff800000

08000ed0 <Chiusura>:

/* Function for Chart: '<Root>/Chart' */
static void Chiusura(const int32_T *sfEvent)
{
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Inport: '<Root>/P1' */
  if ((*sfEvent == event_buttonpressed1) && (rtU.P1 == OFF)) {
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d170      	bne.n	8000fc2 <Chiusura+0xf2>
 8000ee0:	4b8f      	ldr	r3, [pc, #572]	@ (8001120 <Chiusura+0x250>)
 8000ee2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ee6:	f04f 0200 	mov.w	r2, #0
 8000eea:	f04f 0300 	mov.w	r3, #0
 8000eee:	f7ff fdb7 	bl	8000a60 <__aeabi_dcmpeq>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d064      	beq.n	8000fc2 <Chiusura+0xf2>
    switch (rtDW.is_Chiusura) {
 8000ef8:	4b8a      	ldr	r3, [pc, #552]	@ (8001124 <Chiusura+0x254>)
 8000efa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8000efe:	2b03      	cmp	r3, #3
 8000f00:	d034      	beq.n	8000f6c <Chiusura+0x9c>
 8000f02:	2b03      	cmp	r3, #3
 8000f04:	dc3b      	bgt.n	8000f7e <Chiusura+0xae>
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d002      	beq.n	8000f10 <Chiusura+0x40>
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d00c      	beq.n	8000f28 <Chiusura+0x58>
 8000f0e:	e036      	b.n	8000f7e <Chiusura+0xae>
     case IN_Chiuso:
      rtDW.Var_Chiuso = OFF;
 8000f10:	4984      	ldr	r1, [pc, #528]	@ (8001124 <Chiusura+0x254>)
 8000f12:	f04f 0200 	mov.w	r2, #0
 8000f16:	f04f 0300 	mov.w	r3, #0
 8000f1a:	e9c1 2306 	strd	r2, r3, [r1, #24]
      rtDW.is_Chiusura = IN_NO_ACTIVE_CHILD;
 8000f1e:	4b81      	ldr	r3, [pc, #516]	@ (8001124 <Chiusura+0x254>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      break;
 8000f26:	e02a      	b.n	8000f7e <Chiusura+0xae>

     case IN_Errore:
      switch (rtDW.is_Errore) {
 8000f28:	4b7e      	ldr	r3, [pc, #504]	@ (8001124 <Chiusura+0x254>)
 8000f2a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d002      	beq.n	8000f38 <Chiusura+0x68>
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d009      	beq.n	8000f4a <Chiusura+0x7a>
 8000f36:	e014      	b.n	8000f62 <Chiusura+0x92>
       case IN_In_Errore:
        rtDW.is_In_Errore = IN_NO_ACTIVE_CHILD;
 8000f38:	4b7a      	ldr	r3, [pc, #488]	@ (8001124 <Chiusura+0x254>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
        rtDW.is_Errore = IN_NO_ACTIVE_CHILD;
 8000f40:	4b78      	ldr	r3, [pc, #480]	@ (8001124 <Chiusura+0x254>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        break;
 8000f48:	e00b      	b.n	8000f62 <Chiusura+0x92>

       case IN_LED_Rosso_Errore:
        /* Outport: '<Root>/LedR' */
        rtY.LedR = OFF;
 8000f4a:	4977      	ldr	r1, [pc, #476]	@ (8001128 <Chiusura+0x258>)
 8000f4c:	f04f 0200 	mov.w	r2, #0
 8000f50:	f04f 0300 	mov.w	r3, #0
 8000f54:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rtDW.is_Errore = IN_NO_ACTIVE_CHILD;
 8000f58:	4b72      	ldr	r3, [pc, #456]	@ (8001124 <Chiusura+0x254>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        break;
 8000f60:	bf00      	nop
      }

      rtDW.is_Chiusura = IN_NO_ACTIVE_CHILD;
 8000f62:	4b70      	ldr	r3, [pc, #448]	@ (8001124 <Chiusura+0x254>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      break;
 8000f6a:	e008      	b.n	8000f7e <Chiusura+0xae>

     case IN_In_Chiusura:
      rtDW.is_In_Chiusura = IN_NO_ACTIVE_CHILD;
 8000f6c:	4b6d      	ldr	r3, [pc, #436]	@ (8001124 <Chiusura+0x254>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
      rtDW.is_Chiusura = IN_NO_ACTIVE_CHILD;
 8000f74:	4b6b      	ldr	r3, [pc, #428]	@ (8001124 <Chiusura+0x254>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      break;
 8000f7c:	bf00      	nop
    }

    rtDW.is_Cancello = IN_Apertura;
 8000f7e:	4b69      	ldr	r3, [pc, #420]	@ (8001124 <Chiusura+0x254>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    rtDW.Var_Aperto = OFF;
 8000f86:	4967      	ldr	r1, [pc, #412]	@ (8001124 <Chiusura+0x254>)
 8000f88:	f04f 0200 	mov.w	r2, #0
 8000f8c:	f04f 0300 	mov.w	r3, #0
 8000f90:	e9c1 2308 	strd	r2, r3, [r1, #32]
    rtDW.temporalCounter_i1 = 0U;
 8000f94:	4b63      	ldr	r3, [pc, #396]	@ (8001124 <Chiusura+0x254>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	629a      	str	r2, [r3, #40]	@ 0x28
    rtDW.is_Apertura = IN_In_Apertura;
 8000f9a:	4b62      	ldr	r3, [pc, #392]	@ (8001124 <Chiusura+0x254>)
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    rtDW.temporalCounter_i2 = 0U;
 8000fa2:	4b60      	ldr	r3, [pc, #384]	@ (8001124 <Chiusura+0x254>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    rtDW.is_In_Apertura = IN_Blink_AOff;
 8000faa:	4b5e      	ldr	r3, [pc, #376]	@ (8001124 <Chiusura+0x254>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

    /* Outport: '<Root>/LedY' */
    rtY.LedY = OFF;
 8000fb2:	495d      	ldr	r1, [pc, #372]	@ (8001128 <Chiusura+0x258>)
 8000fb4:	f04f 0200 	mov.w	r2, #0
 8000fb8:	f04f 0300 	mov.w	r3, #0
 8000fbc:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8000fc0:	e1a6      	b.n	8001310 <Chiusura+0x440>
  } else {
    switch (rtDW.is_Chiusura) {
 8000fc2:	4b58      	ldr	r3, [pc, #352]	@ (8001124 <Chiusura+0x254>)
 8000fc4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8000fc8:	2b03      	cmp	r3, #3
 8000fca:	f000 80b1 	beq.w	8001130 <Chiusura+0x260>
 8000fce:	2b03      	cmp	r3, #3
 8000fd0:	f300 819e 	bgt.w	8001310 <Chiusura+0x440>
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	f000 8198 	beq.w	800130a <Chiusura+0x43a>
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d000      	beq.n	8000fe0 <Chiusura+0x110>
      break;
    }
  }

  /* End of Inport: '<Root>/P1' */
}
 8000fde:	e197      	b.n	8001310 <Chiusura+0x440>
      if (rtU.P2 == ON) {
 8000fe0:	4b4f      	ldr	r3, [pc, #316]	@ (8001120 <Chiusura+0x250>)
 8000fe2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000fe6:	f04f 0200 	mov.w	r2, #0
 8000fea:	4b50      	ldr	r3, [pc, #320]	@ (800112c <Chiusura+0x25c>)
 8000fec:	f7ff fd38 	bl	8000a60 <__aeabi_dcmpeq>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d035      	beq.n	8001062 <Chiusura+0x192>
        switch (rtDW.is_Errore) {
 8000ff6:	4b4b      	ldr	r3, [pc, #300]	@ (8001124 <Chiusura+0x254>)
 8000ff8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d002      	beq.n	8001006 <Chiusura+0x136>
 8001000:	2b02      	cmp	r3, #2
 8001002:	d009      	beq.n	8001018 <Chiusura+0x148>
 8001004:	e00d      	b.n	8001022 <Chiusura+0x152>
          rtDW.is_In_Errore = IN_NO_ACTIVE_CHILD;
 8001006:	4b47      	ldr	r3, [pc, #284]	@ (8001124 <Chiusura+0x254>)
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
          rtDW.is_Errore = IN_NO_ACTIVE_CHILD;
 800100e:	4b45      	ldr	r3, [pc, #276]	@ (8001124 <Chiusura+0x254>)
 8001010:	2200      	movs	r2, #0
 8001012:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
          break;
 8001016:	e004      	b.n	8001022 <Chiusura+0x152>
          rtDW.is_Errore = IN_NO_ACTIVE_CHILD;
 8001018:	4b42      	ldr	r3, [pc, #264]	@ (8001124 <Chiusura+0x254>)
 800101a:	2200      	movs	r2, #0
 800101c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
          break;
 8001020:	bf00      	nop
        rtDW.is_Chiusura = IN_Chiuso;
 8001022:	4b40      	ldr	r3, [pc, #256]	@ (8001124 <Chiusura+0x254>)
 8001024:	2201      	movs	r2, #1
 8001026:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        rtY.LedG = OFF;
 800102a:	493f      	ldr	r1, [pc, #252]	@ (8001128 <Chiusura+0x258>)
 800102c:	f04f 0200 	mov.w	r2, #0
 8001030:	f04f 0300 	mov.w	r3, #0
 8001034:	e9c1 2300 	strd	r2, r3, [r1]
        rtY.LedR = OFF;
 8001038:	493b      	ldr	r1, [pc, #236]	@ (8001128 <Chiusura+0x258>)
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	f04f 0300 	mov.w	r3, #0
 8001042:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rtY.LedY = OFF;
 8001046:	4938      	ldr	r1, [pc, #224]	@ (8001128 <Chiusura+0x258>)
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	e9c1 2304 	strd	r2, r3, [r1, #16]
        rtDW.Var_Chiuso = ON;
 8001054:	4933      	ldr	r1, [pc, #204]	@ (8001124 <Chiusura+0x254>)
 8001056:	f04f 0200 	mov.w	r2, #0
 800105a:	4b34      	ldr	r3, [pc, #208]	@ (800112c <Chiusura+0x25c>)
 800105c:	e9c1 2306 	strd	r2, r3, [r1, #24]
      break;
 8001060:	e155      	b.n	800130e <Chiusura+0x43e>
      } else if (rtDW.is_Errore == IN_In_Errore) {
 8001062:	4b30      	ldr	r3, [pc, #192]	@ (8001124 <Chiusura+0x254>)
 8001064:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001068:	2b01      	cmp	r3, #1
 800106a:	f040 8150 	bne.w	800130e <Chiusura+0x43e>
        if (rtDW.temporalCounter_i1 >= 100U) {
 800106e:	4b2d      	ldr	r3, [pc, #180]	@ (8001124 <Chiusura+0x254>)
 8001070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001072:	2b63      	cmp	r3, #99	@ 0x63
 8001074:	d91f      	bls.n	80010b6 <Chiusura+0x1e6>
          if (rtDW.is_In_Errore == IN_Blink_EOn) {
 8001076:	4b2b      	ldr	r3, [pc, #172]	@ (8001124 <Chiusura+0x254>)
 8001078:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800107c:	2b02      	cmp	r3, #2
 800107e:	d10b      	bne.n	8001098 <Chiusura+0x1c8>
            rtY.LedY = OFF;
 8001080:	4929      	ldr	r1, [pc, #164]	@ (8001128 <Chiusura+0x258>)
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	f04f 0300 	mov.w	r3, #0
 800108a:	e9c1 2304 	strd	r2, r3, [r1, #16]
            rtDW.is_In_Errore = IN_NO_ACTIVE_CHILD;
 800108e:	4b25      	ldr	r3, [pc, #148]	@ (8001124 <Chiusura+0x254>)
 8001090:	2200      	movs	r2, #0
 8001092:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
 8001096:	e003      	b.n	80010a0 <Chiusura+0x1d0>
            rtDW.is_In_Errore = IN_NO_ACTIVE_CHILD;
 8001098:	4b22      	ldr	r3, [pc, #136]	@ (8001124 <Chiusura+0x254>)
 800109a:	2200      	movs	r2, #0
 800109c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
          rtDW.is_Errore = IN_LED_Rosso_Errore;
 80010a0:	4b20      	ldr	r3, [pc, #128]	@ (8001124 <Chiusura+0x254>)
 80010a2:	2202      	movs	r2, #2
 80010a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
          rtY.LedR = ON;
 80010a8:	491f      	ldr	r1, [pc, #124]	@ (8001128 <Chiusura+0x258>)
 80010aa:	f04f 0200 	mov.w	r2, #0
 80010ae:	4b1f      	ldr	r3, [pc, #124]	@ (800112c <Chiusura+0x25c>)
 80010b0:	e9c1 2302 	strd	r2, r3, [r1, #8]
      break;
 80010b4:	e12b      	b.n	800130e <Chiusura+0x43e>
          switch (rtDW.is_In_Errore) {
 80010b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001124 <Chiusura+0x254>)
 80010b8:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d002      	beq.n	80010c6 <Chiusura+0x1f6>
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d014      	beq.n	80010ee <Chiusura+0x21e>
      break;
 80010c4:	e123      	b.n	800130e <Chiusura+0x43e>
            if (rtDW.temporalCounter_i2 >= 20U) {
 80010c6:	4b17      	ldr	r3, [pc, #92]	@ (8001124 <Chiusura+0x254>)
 80010c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80010cc:	2b13      	cmp	r3, #19
 80010ce:	d923      	bls.n	8001118 <Chiusura+0x248>
              rtDW.temporalCounter_i2 = 0U;
 80010d0:	4b14      	ldr	r3, [pc, #80]	@ (8001124 <Chiusura+0x254>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
              rtDW.is_In_Errore = IN_Blink_EOn;
 80010d8:	4b12      	ldr	r3, [pc, #72]	@ (8001124 <Chiusura+0x254>)
 80010da:	2202      	movs	r2, #2
 80010dc:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
              rtY.LedY = ON;
 80010e0:	4911      	ldr	r1, [pc, #68]	@ (8001128 <Chiusura+0x258>)
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <Chiusura+0x25c>)
 80010e8:	e9c1 2304 	strd	r2, r3, [r1, #16]
            break;
 80010ec:	e014      	b.n	8001118 <Chiusura+0x248>
            if (rtDW.temporalCounter_i2 >= 20U) {
 80010ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001124 <Chiusura+0x254>)
 80010f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80010f4:	2b13      	cmp	r3, #19
 80010f6:	d911      	bls.n	800111c <Chiusura+0x24c>
              rtDW.temporalCounter_i2 = 0U;
 80010f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001124 <Chiusura+0x254>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
              rtDW.is_In_Errore = IN_Blink_EOff;
 8001100:	4b08      	ldr	r3, [pc, #32]	@ (8001124 <Chiusura+0x254>)
 8001102:	2201      	movs	r2, #1
 8001104:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
              rtY.LedY = OFF;
 8001108:	4907      	ldr	r1, [pc, #28]	@ (8001128 <Chiusura+0x258>)
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	f04f 0300 	mov.w	r3, #0
 8001112:	e9c1 2304 	strd	r2, r3, [r1, #16]
            break;
 8001116:	e001      	b.n	800111c <Chiusura+0x24c>
            break;
 8001118:	bf00      	nop
 800111a:	e0f8      	b.n	800130e <Chiusura+0x43e>
            break;
 800111c:	bf00      	nop
      break;
 800111e:	e0f6      	b.n	800130e <Chiusura+0x43e>
 8001120:	200000c8 	.word	0x200000c8
 8001124:	20000080 	.word	0x20000080
 8001128:	200000f0 	.word	0x200000f0
 800112c:	3ff00000 	.word	0x3ff00000
      if ((rtU.P2 == ON) && (rtU.P1 == OFF)) {
 8001130:	4b79      	ldr	r3, [pc, #484]	@ (8001318 <Chiusura+0x448>)
 8001132:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	4b78      	ldr	r3, [pc, #480]	@ (800131c <Chiusura+0x44c>)
 800113c:	f7ff fc90 	bl	8000a60 <__aeabi_dcmpeq>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d02f      	beq.n	80011a6 <Chiusura+0x2d6>
 8001146:	4b74      	ldr	r3, [pc, #464]	@ (8001318 <Chiusura+0x448>)
 8001148:	e9d3 0100 	ldrd	r0, r1, [r3]
 800114c:	f04f 0200 	mov.w	r2, #0
 8001150:	f04f 0300 	mov.w	r3, #0
 8001154:	f7ff fc84 	bl	8000a60 <__aeabi_dcmpeq>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d023      	beq.n	80011a6 <Chiusura+0x2d6>
        rtDW.is_In_Chiusura = IN_NO_ACTIVE_CHILD;
 800115e:	4b70      	ldr	r3, [pc, #448]	@ (8001320 <Chiusura+0x450>)
 8001160:	2200      	movs	r2, #0
 8001162:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
        rtDW.is_Chiusura = IN_Chiuso;
 8001166:	4b6e      	ldr	r3, [pc, #440]	@ (8001320 <Chiusura+0x450>)
 8001168:	2201      	movs	r2, #1
 800116a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        rtY.LedG = OFF;
 800116e:	496d      	ldr	r1, [pc, #436]	@ (8001324 <Chiusura+0x454>)
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	f04f 0300 	mov.w	r3, #0
 8001178:	e9c1 2300 	strd	r2, r3, [r1]
        rtY.LedR = OFF;
 800117c:	4969      	ldr	r1, [pc, #420]	@ (8001324 <Chiusura+0x454>)
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	f04f 0300 	mov.w	r3, #0
 8001186:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rtY.LedY = OFF;
 800118a:	4966      	ldr	r1, [pc, #408]	@ (8001324 <Chiusura+0x454>)
 800118c:	f04f 0200 	mov.w	r2, #0
 8001190:	f04f 0300 	mov.w	r3, #0
 8001194:	e9c1 2304 	strd	r2, r3, [r1, #16]
        rtDW.Var_Chiuso = ON;
 8001198:	4961      	ldr	r1, [pc, #388]	@ (8001320 <Chiusura+0x450>)
 800119a:	f04f 0200 	mov.w	r2, #0
 800119e:	4b5f      	ldr	r3, [pc, #380]	@ (800131c <Chiusura+0x44c>)
 80011a0:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80011a4:	e0b0      	b.n	8001308 <Chiusura+0x438>
      } else if ((rtDW.temporalCounter_i1 >= (uint32_T)ceil(rtDW.TL * 10.0)) &&
 80011a6:	4b5e      	ldr	r3, [pc, #376]	@ (8001320 <Chiusura+0x450>)
 80011a8:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80011aa:	4b5d      	ldr	r3, [pc, #372]	@ (8001320 <Chiusura+0x450>)
 80011ac:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80011b0:	f04f 0200 	mov.w	r2, #0
 80011b4:	4b5c      	ldr	r3, [pc, #368]	@ (8001328 <Chiusura+0x458>)
 80011b6:	f7ff f9eb 	bl	8000590 <__aeabi_dmul>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	ec43 2b17 	vmov	d7, r2, r3
 80011c2:	eeb0 0a47 	vmov.f32	s0, s14
 80011c6:	eef0 0a67 	vmov.f32	s1, s15
 80011ca:	f002 fa61 	bl	8003690 <ceil>
 80011ce:	ec53 2b10 	vmov	r2, r3, d0
 80011d2:	4610      	mov	r0, r2
 80011d4:	4619      	mov	r1, r3
 80011d6:	f7ff fc8b 	bl	8000af0 <__aeabi_d2uiz>
 80011da:	4603      	mov	r3, r0
 80011dc:	429c      	cmp	r4, r3
 80011de:	d32a      	bcc.n	8001236 <Chiusura+0x366>
                 (rtU.P2 == OFF)) {
 80011e0:	4b4d      	ldr	r3, [pc, #308]	@ (8001318 <Chiusura+0x448>)
 80011e2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
      } else if ((rtDW.temporalCounter_i1 >= (uint32_T)ceil(rtDW.TL * 10.0)) &&
 80011e6:	f04f 0200 	mov.w	r2, #0
 80011ea:	f04f 0300 	mov.w	r3, #0
 80011ee:	f7ff fc37 	bl	8000a60 <__aeabi_dcmpeq>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d01e      	beq.n	8001236 <Chiusura+0x366>
        rtDW.is_In_Chiusura = IN_NO_ACTIVE_CHILD;
 80011f8:	4b49      	ldr	r3, [pc, #292]	@ (8001320 <Chiusura+0x450>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
        rtDW.is_Chiusura = IN_Errore;
 8001200:	4b47      	ldr	r3, [pc, #284]	@ (8001320 <Chiusura+0x450>)
 8001202:	2202      	movs	r2, #2
 8001204:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        rtDW.temporalCounter_i1 = 0U;
 8001208:	4b45      	ldr	r3, [pc, #276]	@ (8001320 <Chiusura+0x450>)
 800120a:	2200      	movs	r2, #0
 800120c:	629a      	str	r2, [r3, #40]	@ 0x28
        rtDW.is_Errore = IN_In_Errore;
 800120e:	4b44      	ldr	r3, [pc, #272]	@ (8001320 <Chiusura+0x450>)
 8001210:	2201      	movs	r2, #1
 8001212:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        rtDW.temporalCounter_i2 = 0U;
 8001216:	4b42      	ldr	r3, [pc, #264]	@ (8001320 <Chiusura+0x450>)
 8001218:	2200      	movs	r2, #0
 800121a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        rtDW.is_In_Errore = IN_Blink_EOff;
 800121e:	4b40      	ldr	r3, [pc, #256]	@ (8001320 <Chiusura+0x450>)
 8001220:	2201      	movs	r2, #1
 8001222:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
        rtY.LedY = OFF;
 8001226:	493f      	ldr	r1, [pc, #252]	@ (8001324 <Chiusura+0x454>)
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	f04f 0300 	mov.w	r3, #0
 8001230:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001234:	e068      	b.n	8001308 <Chiusura+0x438>
      } else if (rtU.P1 == ON) {
 8001236:	4b38      	ldr	r3, [pc, #224]	@ (8001318 <Chiusura+0x448>)
 8001238:	e9d3 0100 	ldrd	r0, r1, [r3]
 800123c:	f04f 0200 	mov.w	r2, #0
 8001240:	4b36      	ldr	r3, [pc, #216]	@ (800131c <Chiusura+0x44c>)
 8001242:	f7ff fc0d 	bl	8000a60 <__aeabi_dcmpeq>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d029      	beq.n	80012a0 <Chiusura+0x3d0>
        rtDW.is_In_Chiusura = IN_NO_ACTIVE_CHILD;
 800124c:	4b34      	ldr	r3, [pc, #208]	@ (8001320 <Chiusura+0x450>)
 800124e:	2200      	movs	r2, #0
 8001250:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
        rtDW.is_Chiusura = IN_NO_ACTIVE_CHILD;
 8001254:	4b32      	ldr	r3, [pc, #200]	@ (8001320 <Chiusura+0x450>)
 8001256:	2200      	movs	r2, #0
 8001258:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        rtDW.is_Cancello = IN_Apertura;
 800125c:	4b30      	ldr	r3, [pc, #192]	@ (8001320 <Chiusura+0x450>)
 800125e:	2201      	movs	r2, #1
 8001260:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
        rtDW.Var_Aperto = OFF;
 8001264:	492e      	ldr	r1, [pc, #184]	@ (8001320 <Chiusura+0x450>)
 8001266:	f04f 0200 	mov.w	r2, #0
 800126a:	f04f 0300 	mov.w	r3, #0
 800126e:	e9c1 2308 	strd	r2, r3, [r1, #32]
        rtDW.temporalCounter_i1 = 0U;
 8001272:	4b2b      	ldr	r3, [pc, #172]	@ (8001320 <Chiusura+0x450>)
 8001274:	2200      	movs	r2, #0
 8001276:	629a      	str	r2, [r3, #40]	@ 0x28
        rtDW.is_Apertura = IN_In_Apertura;
 8001278:	4b29      	ldr	r3, [pc, #164]	@ (8001320 <Chiusura+0x450>)
 800127a:	2203      	movs	r2, #3
 800127c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
        rtDW.temporalCounter_i2 = 0U;
 8001280:	4b27      	ldr	r3, [pc, #156]	@ (8001320 <Chiusura+0x450>)
 8001282:	2200      	movs	r2, #0
 8001284:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        rtDW.is_In_Apertura = IN_Blink_AOff;
 8001288:	4b25      	ldr	r3, [pc, #148]	@ (8001320 <Chiusura+0x450>)
 800128a:	2201      	movs	r2, #1
 800128c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        rtY.LedY = OFF;
 8001290:	4924      	ldr	r1, [pc, #144]	@ (8001324 <Chiusura+0x454>)
 8001292:	f04f 0200 	mov.w	r2, #0
 8001296:	f04f 0300 	mov.w	r3, #0
 800129a:	e9c1 2304 	strd	r2, r3, [r1, #16]
      break;
 800129e:	e037      	b.n	8001310 <Chiusura+0x440>
        switch (rtDW.is_In_Chiusura) {
 80012a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001320 <Chiusura+0x450>)
 80012a2:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d002      	beq.n	80012b0 <Chiusura+0x3e0>
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d014      	beq.n	80012d8 <Chiusura+0x408>
      break;
 80012ae:	e02f      	b.n	8001310 <Chiusura+0x440>
          if (rtDW.temporalCounter_i2 >= 20U) {
 80012b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001320 <Chiusura+0x450>)
 80012b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80012b6:	2b13      	cmp	r3, #19
 80012b8:	d923      	bls.n	8001302 <Chiusura+0x432>
            rtDW.temporalCounter_i2 = 0U;
 80012ba:	4b19      	ldr	r3, [pc, #100]	@ (8001320 <Chiusura+0x450>)
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            rtDW.is_In_Chiusura = IN_Blink_COn;
 80012c2:	4b17      	ldr	r3, [pc, #92]	@ (8001320 <Chiusura+0x450>)
 80012c4:	2202      	movs	r2, #2
 80012c6:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
            rtY.LedY = ON;
 80012ca:	4916      	ldr	r1, [pc, #88]	@ (8001324 <Chiusura+0x454>)
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	4b12      	ldr	r3, [pc, #72]	@ (800131c <Chiusura+0x44c>)
 80012d2:	e9c1 2304 	strd	r2, r3, [r1, #16]
          break;
 80012d6:	e014      	b.n	8001302 <Chiusura+0x432>
          if (rtDW.temporalCounter_i2 >= 20U) {
 80012d8:	4b11      	ldr	r3, [pc, #68]	@ (8001320 <Chiusura+0x450>)
 80012da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80012de:	2b13      	cmp	r3, #19
 80012e0:	d911      	bls.n	8001306 <Chiusura+0x436>
            rtDW.temporalCounter_i2 = 0U;
 80012e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001320 <Chiusura+0x450>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            rtDW.is_In_Chiusura = IN_Blink_COff;
 80012ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001320 <Chiusura+0x450>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
            rtY.LedY = OFF;
 80012f2:	490c      	ldr	r1, [pc, #48]	@ (8001324 <Chiusura+0x454>)
 80012f4:	f04f 0200 	mov.w	r2, #0
 80012f8:	f04f 0300 	mov.w	r3, #0
 80012fc:	e9c1 2304 	strd	r2, r3, [r1, #16]
          break;
 8001300:	e001      	b.n	8001306 <Chiusura+0x436>
          break;
 8001302:	bf00      	nop
 8001304:	e004      	b.n	8001310 <Chiusura+0x440>
          break;
 8001306:	bf00      	nop
      break;
 8001308:	e002      	b.n	8001310 <Chiusura+0x440>
      break;
 800130a:	bf00      	nop
 800130c:	e000      	b.n	8001310 <Chiusura+0x440>
      break;
 800130e:	bf00      	nop
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	bd90      	pop	{r4, r7, pc}
 8001318:	200000c8 	.word	0x200000c8
 800131c:	3ff00000 	.word	0x3ff00000
 8001320:	20000080 	.word	0x20000080
 8001324:	200000f0 	.word	0x200000f0
 8001328:	40240000 	.word	0x40240000

0800132c <Cancello>:

/* Function for Chart: '<Root>/Chart' */
static void Cancello(const int32_T *sfEvent)
{
 800132c:	b590      	push	{r4, r7, lr}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  switch (rtDW.is_Cancello) {
 8001334:	4b9c      	ldr	r3, [pc, #624]	@ (80015a8 <Cancello+0x27c>)
 8001336:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800133a:	2b03      	cmp	r3, #3
 800133c:	f000 81b9 	beq.w	80016b2 <Cancello+0x386>
 8001340:	2b03      	cmp	r3, #3
 8001342:	f300 8228 	bgt.w	8001796 <Cancello+0x46a>
 8001346:	2b01      	cmp	r3, #1
 8001348:	d003      	beq.n	8001352 <Cancello+0x26>
 800134a:	2b02      	cmp	r3, #2
 800134c:	f000 81ad 	beq.w	80016aa <Cancello+0x37e>
      /* Outport: '<Root>/LedY' */
      rtY.LedY = OFF;
    }
    break;
  }
}
 8001350:	e221      	b.n	8001796 <Cancello+0x46a>
    if ((*sfEvent == event_buttonpressed1) && (rtU.P1 == OFF)) {
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d15d      	bne.n	8001416 <Cancello+0xea>
 800135a:	4b94      	ldr	r3, [pc, #592]	@ (80015ac <Cancello+0x280>)
 800135c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001360:	f04f 0200 	mov.w	r2, #0
 8001364:	f04f 0300 	mov.w	r3, #0
 8001368:	f7ff fb7a 	bl	8000a60 <__aeabi_dcmpeq>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d051      	beq.n	8001416 <Cancello+0xea>
      switch (rtDW.is_Apertura) {
 8001372:	4b8d      	ldr	r3, [pc, #564]	@ (80015a8 <Cancello+0x27c>)
 8001374:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001378:	2b01      	cmp	r3, #1
 800137a:	d002      	beq.n	8001382 <Cancello+0x56>
 800137c:	2b03      	cmp	r3, #3
 800137e:	d01a      	beq.n	80013b6 <Cancello+0x8a>
 8001380:	e022      	b.n	80013c8 <Cancello+0x9c>
        rtY.LedG = OFF;
 8001382:	498b      	ldr	r1, [pc, #556]	@ (80015b0 <Cancello+0x284>)
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	f04f 0300 	mov.w	r3, #0
 800138c:	e9c1 2300 	strd	r2, r3, [r1]
        rtY.LedR = OFF;
 8001390:	4987      	ldr	r1, [pc, #540]	@ (80015b0 <Cancello+0x284>)
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	f04f 0300 	mov.w	r3, #0
 800139a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rtDW.Var_Aperto = OFF;
 800139e:	4982      	ldr	r1, [pc, #520]	@ (80015a8 <Cancello+0x27c>)
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	f04f 0300 	mov.w	r3, #0
 80013a8:	e9c1 2308 	strd	r2, r3, [r1, #32]
        rtDW.is_Apertura = IN_NO_ACTIVE_CHILD;
 80013ac:	4b7e      	ldr	r3, [pc, #504]	@ (80015a8 <Cancello+0x27c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
        break;
 80013b4:	e00d      	b.n	80013d2 <Cancello+0xa6>
        rtDW.is_In_Apertura = IN_NO_ACTIVE_CHILD;
 80013b6:	4b7c      	ldr	r3, [pc, #496]	@ (80015a8 <Cancello+0x27c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        rtDW.is_Apertura = IN_NO_ACTIVE_CHILD;
 80013be:	4b7a      	ldr	r3, [pc, #488]	@ (80015a8 <Cancello+0x27c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
        break;
 80013c6:	e004      	b.n	80013d2 <Cancello+0xa6>
        rtDW.is_Apertura = IN_NO_ACTIVE_CHILD;
 80013c8:	4b77      	ldr	r3, [pc, #476]	@ (80015a8 <Cancello+0x27c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
        break;
 80013d0:	bf00      	nop
      rtDW.is_Cancello = IN_Chiusura;
 80013d2:	4b75      	ldr	r3, [pc, #468]	@ (80015a8 <Cancello+0x27c>)
 80013d4:	2202      	movs	r2, #2
 80013d6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      rtDW.Var_Chiuso = OFF;
 80013da:	4973      	ldr	r1, [pc, #460]	@ (80015a8 <Cancello+0x27c>)
 80013dc:	f04f 0200 	mov.w	r2, #0
 80013e0:	f04f 0300 	mov.w	r3, #0
 80013e4:	e9c1 2306 	strd	r2, r3, [r1, #24]
      rtDW.temporalCounter_i1 = 0U;
 80013e8:	4b6f      	ldr	r3, [pc, #444]	@ (80015a8 <Cancello+0x27c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	629a      	str	r2, [r3, #40]	@ 0x28
      rtDW.is_Chiusura = IN_In_Chiusura;
 80013ee:	4b6e      	ldr	r3, [pc, #440]	@ (80015a8 <Cancello+0x27c>)
 80013f0:	2203      	movs	r2, #3
 80013f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      rtDW.temporalCounter_i2 = 0U;
 80013f6:	4b6c      	ldr	r3, [pc, #432]	@ (80015a8 <Cancello+0x27c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
      rtDW.is_In_Chiusura = IN_Blink_COff;
 80013fe:	4b6a      	ldr	r3, [pc, #424]	@ (80015a8 <Cancello+0x27c>)
 8001400:	2201      	movs	r2, #1
 8001402:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
      rtY.LedY = OFF;
 8001406:	496a      	ldr	r1, [pc, #424]	@ (80015b0 <Cancello+0x284>)
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	f04f 0300 	mov.w	r3, #0
 8001410:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001414:	e148      	b.n	80016a8 <Cancello+0x37c>
      switch (rtDW.is_Apertura) {
 8001416:	4b64      	ldr	r3, [pc, #400]	@ (80015a8 <Cancello+0x27c>)
 8001418:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800141c:	2b03      	cmp	r3, #3
 800141e:	f000 80cd 	beq.w	80015bc <Cancello+0x290>
 8001422:	2b03      	cmp	r3, #3
 8001424:	f300 81b6 	bgt.w	8001794 <Cancello+0x468>
 8001428:	2b01      	cmp	r3, #1
 800142a:	d003      	beq.n	8001434 <Cancello+0x108>
 800142c:	2b02      	cmp	r3, #2
 800142e:	f000 808e 	beq.w	800154e <Cancello+0x222>
    break;
 8001432:	e1af      	b.n	8001794 <Cancello+0x468>
        if ((rtDW.temporalCounter_i1 >= (uint32_T)ceil(rtDW.TC * 10.0)) &&
 8001434:	4b5c      	ldr	r3, [pc, #368]	@ (80015a8 <Cancello+0x27c>)
 8001436:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8001438:	4b5b      	ldr	r3, [pc, #364]	@ (80015a8 <Cancello+0x27c>)
 800143a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	4b5c      	ldr	r3, [pc, #368]	@ (80015b4 <Cancello+0x288>)
 8001444:	f7ff f8a4 	bl	8000590 <__aeabi_dmul>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	ec43 2b17 	vmov	d7, r2, r3
 8001450:	eeb0 0a47 	vmov.f32	s0, s14
 8001454:	eef0 0a67 	vmov.f32	s1, s15
 8001458:	f002 f91a 	bl	8003690 <ceil>
 800145c:	ec53 2b10 	vmov	r2, r3, d0
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f7ff fb44 	bl	8000af0 <__aeabi_d2uiz>
 8001468:	4603      	mov	r3, r0
 800146a:	429c      	cmp	r4, r3
 800146c:	d346      	bcc.n	80014fc <Cancello+0x1d0>
            (rtU.P1 == OFF)) {
 800146e:	4b4f      	ldr	r3, [pc, #316]	@ (80015ac <Cancello+0x280>)
 8001470:	e9d3 0100 	ldrd	r0, r1, [r3]
        if ((rtDW.temporalCounter_i1 >= (uint32_T)ceil(rtDW.TC * 10.0)) &&
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	f04f 0300 	mov.w	r3, #0
 800147c:	f7ff faf0 	bl	8000a60 <__aeabi_dcmpeq>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d03a      	beq.n	80014fc <Cancello+0x1d0>
          rtY.LedG = OFF;
 8001486:	494a      	ldr	r1, [pc, #296]	@ (80015b0 <Cancello+0x284>)
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	f04f 0300 	mov.w	r3, #0
 8001490:	e9c1 2300 	strd	r2, r3, [r1]
          rtY.LedR = OFF;
 8001494:	4946      	ldr	r1, [pc, #280]	@ (80015b0 <Cancello+0x284>)
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	f04f 0300 	mov.w	r3, #0
 800149e:	e9c1 2302 	strd	r2, r3, [r1, #8]
          rtDW.Var_Aperto = OFF;
 80014a2:	4941      	ldr	r1, [pc, #260]	@ (80015a8 <Cancello+0x27c>)
 80014a4:	f04f 0200 	mov.w	r2, #0
 80014a8:	f04f 0300 	mov.w	r3, #0
 80014ac:	e9c1 2308 	strd	r2, r3, [r1, #32]
          rtDW.is_Apertura = IN_NO_ACTIVE_CHILD;
 80014b0:	4b3d      	ldr	r3, [pc, #244]	@ (80015a8 <Cancello+0x27c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
          rtDW.is_Cancello = IN_Chiusura;
 80014b8:	4b3b      	ldr	r3, [pc, #236]	@ (80015a8 <Cancello+0x27c>)
 80014ba:	2202      	movs	r2, #2
 80014bc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
          rtDW.Var_Chiuso = OFF;
 80014c0:	4939      	ldr	r1, [pc, #228]	@ (80015a8 <Cancello+0x27c>)
 80014c2:	f04f 0200 	mov.w	r2, #0
 80014c6:	f04f 0300 	mov.w	r3, #0
 80014ca:	e9c1 2306 	strd	r2, r3, [r1, #24]
          rtDW.temporalCounter_i1 = 0U;
 80014ce:	4b36      	ldr	r3, [pc, #216]	@ (80015a8 <Cancello+0x27c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	629a      	str	r2, [r3, #40]	@ 0x28
          rtDW.is_Chiusura = IN_In_Chiusura;
 80014d4:	4b34      	ldr	r3, [pc, #208]	@ (80015a8 <Cancello+0x27c>)
 80014d6:	2203      	movs	r2, #3
 80014d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          rtDW.temporalCounter_i2 = 0U;
 80014dc:	4b32      	ldr	r3, [pc, #200]	@ (80015a8 <Cancello+0x27c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
          rtDW.is_In_Chiusura = IN_Blink_COff;
 80014e4:	4b30      	ldr	r3, [pc, #192]	@ (80015a8 <Cancello+0x27c>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
          rtY.LedY = OFF;
 80014ec:	4930      	ldr	r1, [pc, #192]	@ (80015b0 <Cancello+0x284>)
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	f04f 0300 	mov.w	r3, #0
 80014f6:	e9c1 2304 	strd	r2, r3, [r1, #16]
        break;
 80014fa:	e0d5      	b.n	80016a8 <Cancello+0x37c>
        } else if (rtU.P1 == ON) {
 80014fc:	4b2b      	ldr	r3, [pc, #172]	@ (80015ac <Cancello+0x280>)
 80014fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	4b2c      	ldr	r3, [pc, #176]	@ (80015b8 <Cancello+0x28c>)
 8001508:	f7ff faaa 	bl	8000a60 <__aeabi_dcmpeq>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d100      	bne.n	8001514 <Cancello+0x1e8>
        break;
 8001512:	e0c9      	b.n	80016a8 <Cancello+0x37c>
          rtDW.is_Apertura = IN_Aperto_con_ostacolo;
 8001514:	4b24      	ldr	r3, [pc, #144]	@ (80015a8 <Cancello+0x27c>)
 8001516:	2202      	movs	r2, #2
 8001518:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
          rtY.LedG = ON;
 800151c:	4924      	ldr	r1, [pc, #144]	@ (80015b0 <Cancello+0x284>)
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	4b25      	ldr	r3, [pc, #148]	@ (80015b8 <Cancello+0x28c>)
 8001524:	e9c1 2300 	strd	r2, r3, [r1]
          rtY.LedR = ON;
 8001528:	4921      	ldr	r1, [pc, #132]	@ (80015b0 <Cancello+0x284>)
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	4b22      	ldr	r3, [pc, #136]	@ (80015b8 <Cancello+0x28c>)
 8001530:	e9c1 2302 	strd	r2, r3, [r1, #8]
          rtY.LedY = ON;
 8001534:	491e      	ldr	r1, [pc, #120]	@ (80015b0 <Cancello+0x284>)
 8001536:	f04f 0200 	mov.w	r2, #0
 800153a:	4b1f      	ldr	r3, [pc, #124]	@ (80015b8 <Cancello+0x28c>)
 800153c:	e9c1 2304 	strd	r2, r3, [r1, #16]
          rtDW.Var_Aperto = ON;
 8001540:	4919      	ldr	r1, [pc, #100]	@ (80015a8 <Cancello+0x27c>)
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	4b1c      	ldr	r3, [pc, #112]	@ (80015b8 <Cancello+0x28c>)
 8001548:	e9c1 2308 	strd	r2, r3, [r1, #32]
        break;
 800154c:	e0ac      	b.n	80016a8 <Cancello+0x37c>
        if (rtU.P1 == OFF) {
 800154e:	4b17      	ldr	r3, [pc, #92]	@ (80015ac <Cancello+0x280>)
 8001550:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	f04f 0300 	mov.w	r3, #0
 800155c:	f7ff fa80 	bl	8000a60 <__aeabi_dcmpeq>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d100      	bne.n	8001568 <Cancello+0x23c>
        break;
 8001566:	e09f      	b.n	80016a8 <Cancello+0x37c>
          rtDW.temporalCounter_i1 = 0U;
 8001568:	4b0f      	ldr	r3, [pc, #60]	@ (80015a8 <Cancello+0x27c>)
 800156a:	2200      	movs	r2, #0
 800156c:	629a      	str	r2, [r3, #40]	@ 0x28
          rtDW.is_Apertura = IN_Aperto;
 800156e:	4b0e      	ldr	r3, [pc, #56]	@ (80015a8 <Cancello+0x27c>)
 8001570:	2201      	movs	r2, #1
 8001572:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
          rtY.LedG = ON;
 8001576:	490e      	ldr	r1, [pc, #56]	@ (80015b0 <Cancello+0x284>)
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <Cancello+0x28c>)
 800157e:	e9c1 2300 	strd	r2, r3, [r1]
          rtY.LedR = ON;
 8001582:	490b      	ldr	r1, [pc, #44]	@ (80015b0 <Cancello+0x284>)
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	4b0b      	ldr	r3, [pc, #44]	@ (80015b8 <Cancello+0x28c>)
 800158a:	e9c1 2302 	strd	r2, r3, [r1, #8]
          rtY.LedY = ON;
 800158e:	4908      	ldr	r1, [pc, #32]	@ (80015b0 <Cancello+0x284>)
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	4b08      	ldr	r3, [pc, #32]	@ (80015b8 <Cancello+0x28c>)
 8001596:	e9c1 2304 	strd	r2, r3, [r1, #16]
          rtDW.Var_Aperto = ON;
 800159a:	4903      	ldr	r1, [pc, #12]	@ (80015a8 <Cancello+0x27c>)
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	4b05      	ldr	r3, [pc, #20]	@ (80015b8 <Cancello+0x28c>)
 80015a2:	e9c1 2308 	strd	r2, r3, [r1, #32]
        break;
 80015a6:	e07f      	b.n	80016a8 <Cancello+0x37c>
 80015a8:	20000080 	.word	0x20000080
 80015ac:	200000c8 	.word	0x200000c8
 80015b0:	200000f0 	.word	0x200000f0
 80015b4:	40240000 	.word	0x40240000
 80015b8:	3ff00000 	.word	0x3ff00000
        if (rtDW.temporalCounter_i1 >= (uint32_T)ceil(rtDW.TL * 10.0)) {
 80015bc:	4b78      	ldr	r3, [pc, #480]	@ (80017a0 <Cancello+0x474>)
 80015be:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80015c0:	4b77      	ldr	r3, [pc, #476]	@ (80017a0 <Cancello+0x474>)
 80015c2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80015c6:	f04f 0200 	mov.w	r2, #0
 80015ca:	4b76      	ldr	r3, [pc, #472]	@ (80017a4 <Cancello+0x478>)
 80015cc:	f7fe ffe0 	bl	8000590 <__aeabi_dmul>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	ec43 2b17 	vmov	d7, r2, r3
 80015d8:	eeb0 0a47 	vmov.f32	s0, s14
 80015dc:	eef0 0a67 	vmov.f32	s1, s15
 80015e0:	f002 f856 	bl	8003690 <ceil>
 80015e4:	ec53 2b10 	vmov	r2, r3, d0
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	f7ff fa80 	bl	8000af0 <__aeabi_d2uiz>
 80015f0:	4603      	mov	r3, r0
 80015f2:	429c      	cmp	r4, r3
 80015f4:	d323      	bcc.n	800163e <Cancello+0x312>
          rtDW.is_In_Apertura = IN_NO_ACTIVE_CHILD;
 80015f6:	4b6a      	ldr	r3, [pc, #424]	@ (80017a0 <Cancello+0x474>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
          rtDW.temporalCounter_i1 = 0U;
 80015fe:	4b68      	ldr	r3, [pc, #416]	@ (80017a0 <Cancello+0x474>)
 8001600:	2200      	movs	r2, #0
 8001602:	629a      	str	r2, [r3, #40]	@ 0x28
          rtDW.is_Apertura = IN_Aperto;
 8001604:	4b66      	ldr	r3, [pc, #408]	@ (80017a0 <Cancello+0x474>)
 8001606:	2201      	movs	r2, #1
 8001608:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
          rtY.LedG = ON;
 800160c:	4966      	ldr	r1, [pc, #408]	@ (80017a8 <Cancello+0x47c>)
 800160e:	f04f 0200 	mov.w	r2, #0
 8001612:	4b66      	ldr	r3, [pc, #408]	@ (80017ac <Cancello+0x480>)
 8001614:	e9c1 2300 	strd	r2, r3, [r1]
          rtY.LedR = ON;
 8001618:	4963      	ldr	r1, [pc, #396]	@ (80017a8 <Cancello+0x47c>)
 800161a:	f04f 0200 	mov.w	r2, #0
 800161e:	4b63      	ldr	r3, [pc, #396]	@ (80017ac <Cancello+0x480>)
 8001620:	e9c1 2302 	strd	r2, r3, [r1, #8]
          rtY.LedY = ON;
 8001624:	4960      	ldr	r1, [pc, #384]	@ (80017a8 <Cancello+0x47c>)
 8001626:	f04f 0200 	mov.w	r2, #0
 800162a:	4b60      	ldr	r3, [pc, #384]	@ (80017ac <Cancello+0x480>)
 800162c:	e9c1 2304 	strd	r2, r3, [r1, #16]
          rtDW.Var_Aperto = ON;
 8001630:	495b      	ldr	r1, [pc, #364]	@ (80017a0 <Cancello+0x474>)
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	4b5d      	ldr	r3, [pc, #372]	@ (80017ac <Cancello+0x480>)
 8001638:	e9c1 2308 	strd	r2, r3, [r1, #32]
        break;
 800163c:	e033      	b.n	80016a6 <Cancello+0x37a>
          switch (rtDW.is_In_Apertura) {
 800163e:	4b58      	ldr	r3, [pc, #352]	@ (80017a0 <Cancello+0x474>)
 8001640:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8001644:	2b01      	cmp	r3, #1
 8001646:	d002      	beq.n	800164e <Cancello+0x322>
 8001648:	2b02      	cmp	r3, #2
 800164a:	d014      	beq.n	8001676 <Cancello+0x34a>
        break;
 800164c:	e02b      	b.n	80016a6 <Cancello+0x37a>
            if (rtDW.temporalCounter_i2 >= 20U) {
 800164e:	4b54      	ldr	r3, [pc, #336]	@ (80017a0 <Cancello+0x474>)
 8001650:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001654:	2b13      	cmp	r3, #19
 8001656:	d923      	bls.n	80016a0 <Cancello+0x374>
              rtDW.temporalCounter_i2 = 0U;
 8001658:	4b51      	ldr	r3, [pc, #324]	@ (80017a0 <Cancello+0x474>)
 800165a:	2200      	movs	r2, #0
 800165c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
              rtDW.is_In_Apertura = IN_Blink_AOn;
 8001660:	4b4f      	ldr	r3, [pc, #316]	@ (80017a0 <Cancello+0x474>)
 8001662:	2202      	movs	r2, #2
 8001664:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
              rtY.LedY = ON;
 8001668:	494f      	ldr	r1, [pc, #316]	@ (80017a8 <Cancello+0x47c>)
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	4b4f      	ldr	r3, [pc, #316]	@ (80017ac <Cancello+0x480>)
 8001670:	e9c1 2304 	strd	r2, r3, [r1, #16]
            break;
 8001674:	e014      	b.n	80016a0 <Cancello+0x374>
            if (rtDW.temporalCounter_i2 >= 20U) {
 8001676:	4b4a      	ldr	r3, [pc, #296]	@ (80017a0 <Cancello+0x474>)
 8001678:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800167c:	2b13      	cmp	r3, #19
 800167e:	d911      	bls.n	80016a4 <Cancello+0x378>
              rtDW.temporalCounter_i2 = 0U;
 8001680:	4b47      	ldr	r3, [pc, #284]	@ (80017a0 <Cancello+0x474>)
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
              rtDW.is_In_Apertura = IN_Blink_AOff;
 8001688:	4b45      	ldr	r3, [pc, #276]	@ (80017a0 <Cancello+0x474>)
 800168a:	2201      	movs	r2, #1
 800168c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
              rtY.LedY = OFF;
 8001690:	4945      	ldr	r1, [pc, #276]	@ (80017a8 <Cancello+0x47c>)
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	f04f 0300 	mov.w	r3, #0
 800169a:	e9c1 2304 	strd	r2, r3, [r1, #16]
            break;
 800169e:	e001      	b.n	80016a4 <Cancello+0x378>
            break;
 80016a0:	bf00      	nop
 80016a2:	e000      	b.n	80016a6 <Cancello+0x37a>
            break;
 80016a4:	bf00      	nop
        break;
 80016a6:	bf00      	nop
    break;
 80016a8:	e074      	b.n	8001794 <Cancello+0x468>
    Chiusura(sfEvent);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff fc10 	bl	8000ed0 <Chiusura>
    break;
 80016b0:	e071      	b.n	8001796 <Cancello+0x46a>
    if (((rtU.P1 == OFF) && (rtU.P2 == OFF)) || ((rtU.P1 == ON) && (rtU.P2 ==
 80016b2:	4b3f      	ldr	r3, [pc, #252]	@ (80017b0 <Cancello+0x484>)
 80016b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	f04f 0300 	mov.w	r3, #0
 80016c0:	f7ff f9ce 	bl	8000a60 <__aeabi_dcmpeq>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00b      	beq.n	80016e2 <Cancello+0x3b6>
 80016ca:	4b39      	ldr	r3, [pc, #228]	@ (80017b0 <Cancello+0x484>)
 80016cc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	f04f 0300 	mov.w	r3, #0
 80016d8:	f7ff f9c2 	bl	8000a60 <__aeabi_dcmpeq>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d12f      	bne.n	8001742 <Cancello+0x416>
 80016e2:	4b33      	ldr	r3, [pc, #204]	@ (80017b0 <Cancello+0x484>)
 80016e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016e8:	f04f 0200 	mov.w	r2, #0
 80016ec:	4b2f      	ldr	r3, [pc, #188]	@ (80017ac <Cancello+0x480>)
 80016ee:	f7ff f9b7 	bl	8000a60 <__aeabi_dcmpeq>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d00b      	beq.n	8001710 <Cancello+0x3e4>
 80016f8:	4b2d      	ldr	r3, [pc, #180]	@ (80017b0 <Cancello+0x484>)
 80016fa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	f04f 0300 	mov.w	r3, #0
 8001706:	f7ff f9ab 	bl	8000a60 <__aeabi_dcmpeq>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d118      	bne.n	8001742 <Cancello+0x416>
          OFF)) || ((rtU.P1 == OFF) && (rtU.P2 == ON))) {
 8001710:	4b27      	ldr	r3, [pc, #156]	@ (80017b0 <Cancello+0x484>)
 8001712:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	f04f 0300 	mov.w	r3, #0
 800171e:	f7ff f99f 	bl	8000a60 <__aeabi_dcmpeq>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d100      	bne.n	800172a <Cancello+0x3fe>
    break;
 8001728:	e035      	b.n	8001796 <Cancello+0x46a>
          OFF)) || ((rtU.P1 == OFF) && (rtU.P2 == ON))) {
 800172a:	4b21      	ldr	r3, [pc, #132]	@ (80017b0 <Cancello+0x484>)
 800172c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001730:	f04f 0200 	mov.w	r2, #0
 8001734:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <Cancello+0x480>)
 8001736:	f7ff f993 	bl	8000a60 <__aeabi_dcmpeq>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d100      	bne.n	8001742 <Cancello+0x416>
    break;
 8001740:	e029      	b.n	8001796 <Cancello+0x46a>
      rtDW.Var_Inattivo = OFF;
 8001742:	4917      	ldr	r1, [pc, #92]	@ (80017a0 <Cancello+0x474>)
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	f04f 0300 	mov.w	r3, #0
 800174c:	e9c1 2304 	strd	r2, r3, [r1, #16]
      rtDW.is_Cancello = IN_Chiusura;
 8001750:	4b13      	ldr	r3, [pc, #76]	@ (80017a0 <Cancello+0x474>)
 8001752:	2202      	movs	r2, #2
 8001754:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      rtDW.Var_Chiuso = OFF;
 8001758:	4911      	ldr	r1, [pc, #68]	@ (80017a0 <Cancello+0x474>)
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	f04f 0300 	mov.w	r3, #0
 8001762:	e9c1 2306 	strd	r2, r3, [r1, #24]
      rtDW.temporalCounter_i1 = 0U;
 8001766:	4b0e      	ldr	r3, [pc, #56]	@ (80017a0 <Cancello+0x474>)
 8001768:	2200      	movs	r2, #0
 800176a:	629a      	str	r2, [r3, #40]	@ 0x28
      rtDW.is_Chiusura = IN_In_Chiusura;
 800176c:	4b0c      	ldr	r3, [pc, #48]	@ (80017a0 <Cancello+0x474>)
 800176e:	2203      	movs	r2, #3
 8001770:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      rtDW.temporalCounter_i2 = 0U;
 8001774:	4b0a      	ldr	r3, [pc, #40]	@ (80017a0 <Cancello+0x474>)
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
      rtDW.is_In_Chiusura = IN_Blink_COff;
 800177c:	4b08      	ldr	r3, [pc, #32]	@ (80017a0 <Cancello+0x474>)
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
      rtY.LedY = OFF;
 8001784:	4908      	ldr	r1, [pc, #32]	@ (80017a8 <Cancello+0x47c>)
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	f04f 0300 	mov.w	r3, #0
 800178e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    break;
 8001792:	e000      	b.n	8001796 <Cancello+0x46a>
    break;
 8001794:	bf00      	nop
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	bd90      	pop	{r4, r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000080 	.word	0x20000080
 80017a4:	40240000 	.word	0x40240000
 80017a8:	200000f0 	.word	0x200000f0
 80017ac:	3ff00000 	.word	0x3ff00000
 80017b0:	200000c8 	.word	0x200000c8
 80017b4:	00000000 	.word	0x00000000

080017b8 <mod>:

/* Function for Chart: '<Root>/Chart' */
static real_T mod(real_T x)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	ed87 0b00 	vstr	d0, [r7]
  real_T r;
  if (rtIsNaN(x)) {
 80017c2:	ed97 0b00 	vldr	d0, [r7]
 80017c6:	f7ff faaf 	bl	8000d28 <rtIsNaN>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d005      	beq.n	80017dc <mod+0x24>
    r = (rtNaN);
 80017d0:	4b31      	ldr	r3, [pc, #196]	@ (8001898 <mod+0xe0>)
 80017d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80017da:	e04e      	b.n	800187a <mod+0xc2>
  } else if (rtIsInf(x)) {
 80017dc:	ed97 0b00 	vldr	d0, [r7]
 80017e0:	f7ff fa7e 	bl	8000ce0 <rtIsInf>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d005      	beq.n	80017f6 <mod+0x3e>
    r = (rtNaN);
 80017ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001898 <mod+0xe0>)
 80017ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80017f4:	e041      	b.n	800187a <mod+0xc2>
  } else if (x == 0.0) {
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	f04f 0300 	mov.w	r3, #0
 80017fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001802:	f7ff f92d 	bl	8000a60 <__aeabi_dcmpeq>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d006      	beq.n	800181a <mod+0x62>
    r = 0.0;
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	f04f 0300 	mov.w	r3, #0
 8001814:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001818:	e02f      	b.n	800187a <mod+0xc2>
  } else {
    r = fmod(x, 120.0);
 800181a:	ed9f 1b1d 	vldr	d1, [pc, #116]	@ 8001890 <mod+0xd8>
 800181e:	ed97 0b00 	vldr	d0, [r7]
 8001822:	f001 ff05 	bl	8003630 <fmod>
 8001826:	ed87 0b02 	vstr	d0, [r7, #8]
    if (r == 0.0) {
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	f04f 0300 	mov.w	r3, #0
 8001832:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001836:	f7ff f913 	bl	8000a60 <__aeabi_dcmpeq>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d006      	beq.n	800184e <mod+0x96>
      r = 0.0;
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	f04f 0300 	mov.w	r3, #0
 8001848:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800184c:	e015      	b.n	800187a <mod+0xc2>
    } else if (x < 0.0) {
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	f04f 0300 	mov.w	r3, #0
 8001856:	e9d7 0100 	ldrd	r0, r1, [r7]
 800185a:	f7ff f90b 	bl	8000a74 <__aeabi_dcmplt>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d00a      	beq.n	800187a <mod+0xc2>
      r += 120.0;
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	4b0c      	ldr	r3, [pc, #48]	@ (800189c <mod+0xe4>)
 800186a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800186e:	f7fe fcd9 	bl	8000224 <__adddf3>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	e9c7 2302 	strd	r2, r3, [r7, #8]
    }
  }

  return r;
 800187a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800187e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001882:	eeb0 0a47 	vmov.f32	s0, s14
 8001886:	eef0 0a67 	vmov.f32	s1, s15
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	00000000 	.word	0x00000000
 8001894:	405e0000 	.word	0x405e0000
 8001898:	20000118 	.word	0x20000118
 800189c:	405e0000 	.word	0x405e0000

080018a0 <Regolazione_Tempo_Lavoro>:

/* Function for Chart: '<Root>/Chart' */
static void Regolazione_Tempo_Lavoro(const int32_T *sfEvent)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  switch (rtDW.is_Regolazione_Tempo_Lavoro) {
 80018a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001920 <Regolazione_Tempo_Lavoro+0x80>)
 80018aa:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d002      	beq.n	80018b8 <Regolazione_Tempo_Lavoro+0x18>
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d005      	beq.n	80018c2 <Regolazione_Tempo_Lavoro+0x22>
      rtDW.is_Regolazione_Tempo_Lavoro = IN_Aggiunta_Tempo_Lavoro;
      rtDW.TL = mod(rtDW.TL) + 10.0;
    }
    break;
  }
}
 80018b6:	e02f      	b.n	8001918 <Regolazione_Tempo_Lavoro+0x78>
    rtDW.is_Regolazione_Tempo_Lavoro = IN_Tempo_Lavoro;
 80018b8:	4b19      	ldr	r3, [pc, #100]	@ (8001920 <Regolazione_Tempo_Lavoro+0x80>)
 80018ba:	2202      	movs	r2, #2
 80018bc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    break;
 80018c0:	e02a      	b.n	8001918 <Regolazione_Tempo_Lavoro+0x78>
    if ((rtDW.Var_Chiuso != 0.0) && (*sfEvent == event_buttonpressed3)) {
 80018c2:	4b17      	ldr	r3, [pc, #92]	@ (8001920 <Regolazione_Tempo_Lavoro+0x80>)
 80018c4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	f7ff f8c6 	bl	8000a60 <__aeabi_dcmpeq>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d000      	beq.n	80018dc <Regolazione_Tempo_Lavoro+0x3c>
    break;
 80018da:	e01c      	b.n	8001916 <Regolazione_Tempo_Lavoro+0x76>
    if ((rtDW.Var_Chiuso != 0.0) && (*sfEvent == event_buttonpressed3)) {
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d118      	bne.n	8001916 <Regolazione_Tempo_Lavoro+0x76>
      rtDW.is_Regolazione_Tempo_Lavoro = IN_Aggiunta_Tempo_Lavoro;
 80018e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001920 <Regolazione_Tempo_Lavoro+0x80>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
      rtDW.TL = mod(rtDW.TL) + 10.0;
 80018ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001920 <Regolazione_Tempo_Lavoro+0x80>)
 80018ee:	ed93 7b02 	vldr	d7, [r3, #8]
 80018f2:	eeb0 0a47 	vmov.f32	s0, s14
 80018f6:	eef0 0a67 	vmov.f32	s1, s15
 80018fa:	f7ff ff5d 	bl	80017b8 <mod>
 80018fe:	ec51 0b10 	vmov	r0, r1, d0
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	4b07      	ldr	r3, [pc, #28]	@ (8001924 <Regolazione_Tempo_Lavoro+0x84>)
 8001908:	f7fe fc8c 	bl	8000224 <__adddf3>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4903      	ldr	r1, [pc, #12]	@ (8001920 <Regolazione_Tempo_Lavoro+0x80>)
 8001912:	e9c1 2302 	strd	r2, r3, [r1, #8]
    break;
 8001916:	bf00      	nop
}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000080 	.word	0x20000080
 8001924:	40240000 	.word	0x40240000

08001928 <Ostacolo>:

/* Function for Chart: '<Root>/Chart' */
static void Ostacolo(const int32_T *sfEvent)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  switch (rtDW.is_Ostacolo) {
 8001930:	4b8b      	ldr	r3, [pc, #556]	@ (8001b60 <Ostacolo+0x238>)
 8001932:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8001936:	2b03      	cmp	r3, #3
 8001938:	d059      	beq.n	80019ee <Ostacolo+0xc6>
 800193a:	2b03      	cmp	r3, #3
 800193c:	f300 810b 	bgt.w	8001b56 <Ostacolo+0x22e>
 8001940:	2b01      	cmp	r3, #1
 8001942:	d002      	beq.n	800194a <Ostacolo+0x22>
 8001944:	2b02      	cmp	r3, #2
 8001946:	d005      	beq.n	8001954 <Ostacolo+0x2c>
        break;
      }
    }
    break;
  }
}
 8001948:	e105      	b.n	8001b56 <Ostacolo+0x22e>
    rtDW.is_Ostacolo = IN_Fermo;
 800194a:	4b85      	ldr	r3, [pc, #532]	@ (8001b60 <Ostacolo+0x238>)
 800194c:	2202      	movs	r2, #2
 800194e:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    break;
 8001952:	e100      	b.n	8001b56 <Ostacolo+0x22e>
    if (((rtDW.Var_Inattivo != 0.0) || (rtDW.Var_Chiuso != 0.0) ||
 8001954:	4b82      	ldr	r3, [pc, #520]	@ (8001b60 <Ostacolo+0x238>)
 8001956:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	f04f 0300 	mov.w	r3, #0
 8001962:	f7ff f87d 	bl	8000a60 <__aeabi_dcmpeq>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d018      	beq.n	800199e <Ostacolo+0x76>
 800196c:	4b7c      	ldr	r3, [pc, #496]	@ (8001b60 <Ostacolo+0x238>)
 800196e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	f04f 0300 	mov.w	r3, #0
 800197a:	f7ff f871 	bl	8000a60 <__aeabi_dcmpeq>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d00c      	beq.n	800199e <Ostacolo+0x76>
         (rtDW.Var_Aperto != 0.0)) && (*sfEvent == event_buttonpressed1) &&
 8001984:	4b76      	ldr	r3, [pc, #472]	@ (8001b60 <Ostacolo+0x238>)
 8001986:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
    if (((rtDW.Var_Inattivo != 0.0) || (rtDW.Var_Chiuso != 0.0) ||
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	f04f 0300 	mov.w	r3, #0
 8001992:	f7ff f865 	bl	8000a60 <__aeabi_dcmpeq>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d000      	beq.n	800199e <Ostacolo+0x76>
    break;
 800199c:	e0da      	b.n	8001b54 <Ostacolo+0x22c>
         (rtDW.Var_Aperto != 0.0)) && (*sfEvent == event_buttonpressed1) &&
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f040 80d6 	bne.w	8001b54 <Ostacolo+0x22c>
        (rtU.P1 == ON)) {
 80019a8:	4b6e      	ldr	r3, [pc, #440]	@ (8001b64 <Ostacolo+0x23c>)
 80019aa:	e9d3 0100 	ldrd	r0, r1, [r3]
         (rtDW.Var_Aperto != 0.0)) && (*sfEvent == event_buttonpressed1) &&
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	4b6d      	ldr	r3, [pc, #436]	@ (8001b68 <Ostacolo+0x240>)
 80019b4:	f7ff f854 	bl	8000a60 <__aeabi_dcmpeq>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d100      	bne.n	80019c0 <Ostacolo+0x98>
    break;
 80019be:	e0c9      	b.n	8001b54 <Ostacolo+0x22c>
      rtDW.temporalCounter_i3 = 0U;
 80019c0:	4b67      	ldr	r3, [pc, #412]	@ (8001b60 <Ostacolo+0x238>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	859a      	strh	r2, [r3, #44]	@ 0x2c
      rtDW.is_Ostacolo = IN_Ostacolo_Presente;
 80019c6:	4b66      	ldr	r3, [pc, #408]	@ (8001b60 <Ostacolo+0x238>)
 80019c8:	2203      	movs	r2, #3
 80019ca:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
      rtDW.temporalCounter_i4 = 0U;
 80019ce:	4b64      	ldr	r3, [pc, #400]	@ (8001b60 <Ostacolo+0x238>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
      rtDW.is_Ostacolo_Presente = IN_Blink_OOff;
 80019d6:	4b62      	ldr	r3, [pc, #392]	@ (8001b60 <Ostacolo+0x238>)
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      rtY.LedG = OFF;
 80019de:	4963      	ldr	r1, [pc, #396]	@ (8001b6c <Ostacolo+0x244>)
 80019e0:	f04f 0200 	mov.w	r2, #0
 80019e4:	f04f 0300 	mov.w	r3, #0
 80019e8:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 80019ec:	e0b2      	b.n	8001b54 <Ostacolo+0x22c>
    if ((rtDW.Var_Aperto != 0.0) && ((rtU.P1 == OFF) || (rtDW.temporalCounter_i3
 80019ee:	4b5c      	ldr	r3, [pc, #368]	@ (8001b60 <Ostacolo+0x238>)
 80019f0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	f7ff f830 	bl	8000a60 <__aeabi_dcmpeq>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d11f      	bne.n	8001a46 <Ostacolo+0x11e>
 8001a06:	4b57      	ldr	r3, [pc, #348]	@ (8001b64 <Ostacolo+0x23c>)
 8001a08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	f7ff f824 	bl	8000a60 <__aeabi_dcmpeq>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d104      	bne.n	8001a28 <Ostacolo+0x100>
 8001a1e:	4b50      	ldr	r3, [pc, #320]	@ (8001b60 <Ostacolo+0x238>)
 8001a20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001a22:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001a26:	d30e      	bcc.n	8001a46 <Ostacolo+0x11e>
      rtDW.is_Ostacolo_Presente = IN_NO_ACTIVE_CHILD;
 8001a28:	4b4d      	ldr	r3, [pc, #308]	@ (8001b60 <Ostacolo+0x238>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      rtDW.is_Ostacolo = IN_Aperto_Con_Ostacolo_Led;
 8001a30:	4b4b      	ldr	r3, [pc, #300]	@ (8001b60 <Ostacolo+0x238>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
      rtY.LedG = ON;
 8001a38:	494c      	ldr	r1, [pc, #304]	@ (8001b6c <Ostacolo+0x244>)
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	4b4a      	ldr	r3, [pc, #296]	@ (8001b68 <Ostacolo+0x240>)
 8001a40:	e9c1 2300 	strd	r2, r3, [r1]
 8001a44:	e085      	b.n	8001b52 <Ostacolo+0x22a>
    } else if ((rtU.P1 == OFF) || ((rtDW.temporalCounter_i3 >= 300U) &&
 8001a46:	4b47      	ldr	r3, [pc, #284]	@ (8001b64 <Ostacolo+0x23c>)
 8001a48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	f04f 0300 	mov.w	r3, #0
 8001a54:	f7ff f804 	bl	8000a60 <__aeabi_dcmpeq>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d110      	bne.n	8001a80 <Ostacolo+0x158>
 8001a5e:	4b40      	ldr	r3, [pc, #256]	@ (8001b60 <Ostacolo+0x238>)
 8001a60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001a62:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001a66:	d325      	bcc.n	8001ab4 <Ostacolo+0x18c>
                (rtDW.Var_Aperto == OFF))) {
 8001a68:	4b3d      	ldr	r3, [pc, #244]	@ (8001b60 <Ostacolo+0x238>)
 8001a6a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
    } else if ((rtU.P1 == OFF) || ((rtDW.temporalCounter_i3 >= 300U) &&
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	f7fe fff3 	bl	8000a60 <__aeabi_dcmpeq>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d019      	beq.n	8001ab4 <Ostacolo+0x18c>
      if (rtDW.is_Ostacolo_Presente == IN_Blink_OOn) {
 8001a80:	4b37      	ldr	r3, [pc, #220]	@ (8001b60 <Ostacolo+0x238>)
 8001a82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d10b      	bne.n	8001aa2 <Ostacolo+0x17a>
        rtY.LedG = OFF;
 8001a8a:	4938      	ldr	r1, [pc, #224]	@ (8001b6c <Ostacolo+0x244>)
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	f04f 0300 	mov.w	r3, #0
 8001a94:	e9c1 2300 	strd	r2, r3, [r1]
        rtDW.is_Ostacolo_Presente = IN_NO_ACTIVE_CHILD;
 8001a98:	4b31      	ldr	r3, [pc, #196]	@ (8001b60 <Ostacolo+0x238>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001aa0:	e003      	b.n	8001aaa <Ostacolo+0x182>
        rtDW.is_Ostacolo_Presente = IN_NO_ACTIVE_CHILD;
 8001aa2:	4b2f      	ldr	r3, [pc, #188]	@ (8001b60 <Ostacolo+0x238>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      rtDW.is_Ostacolo = IN_Fermo;
 8001aaa:	4b2d      	ldr	r3, [pc, #180]	@ (8001b60 <Ostacolo+0x238>)
 8001aac:	2202      	movs	r2, #2
 8001aae:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8001ab2:	e04e      	b.n	8001b52 <Ostacolo+0x22a>
    } else if (*sfEvent == event_buttonpressed1) {
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d116      	bne.n	8001aea <Ostacolo+0x1c2>
      rtDW.temporalCounter_i3 = 0U;
 8001abc:	4b28      	ldr	r3, [pc, #160]	@ (8001b60 <Ostacolo+0x238>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	859a      	strh	r2, [r3, #44]	@ 0x2c
      rtDW.is_Ostacolo = IN_Ostacolo_Presente;
 8001ac2:	4b27      	ldr	r3, [pc, #156]	@ (8001b60 <Ostacolo+0x238>)
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
      rtDW.temporalCounter_i4 = 0U;
 8001aca:	4b25      	ldr	r3, [pc, #148]	@ (8001b60 <Ostacolo+0x238>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
      rtDW.is_Ostacolo_Presente = IN_Blink_OOff;
 8001ad2:	4b23      	ldr	r3, [pc, #140]	@ (8001b60 <Ostacolo+0x238>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      rtY.LedG = OFF;
 8001ada:	4924      	ldr	r1, [pc, #144]	@ (8001b6c <Ostacolo+0x244>)
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 8001ae8:	e035      	b.n	8001b56 <Ostacolo+0x22e>
      switch (rtDW.is_Ostacolo_Presente) {
 8001aea:	4b1d      	ldr	r3, [pc, #116]	@ (8001b60 <Ostacolo+0x238>)
 8001aec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d002      	beq.n	8001afa <Ostacolo+0x1d2>
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d014      	beq.n	8001b22 <Ostacolo+0x1fa>
    break;
 8001af8:	e02d      	b.n	8001b56 <Ostacolo+0x22e>
        if (rtDW.temporalCounter_i4 >= 10U) {
 8001afa:	4b19      	ldr	r3, [pc, #100]	@ (8001b60 <Ostacolo+0x238>)
 8001afc:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8001b00:	2b09      	cmp	r3, #9
 8001b02:	d923      	bls.n	8001b4c <Ostacolo+0x224>
          rtDW.temporalCounter_i4 = 0U;
 8001b04:	4b16      	ldr	r3, [pc, #88]	@ (8001b60 <Ostacolo+0x238>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
          rtDW.is_Ostacolo_Presente = IN_Blink_OOn;
 8001b0c:	4b14      	ldr	r3, [pc, #80]	@ (8001b60 <Ostacolo+0x238>)
 8001b0e:	2202      	movs	r2, #2
 8001b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          rtY.LedG = ON;
 8001b14:	4915      	ldr	r1, [pc, #84]	@ (8001b6c <Ostacolo+0x244>)
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	4b13      	ldr	r3, [pc, #76]	@ (8001b68 <Ostacolo+0x240>)
 8001b1c:	e9c1 2300 	strd	r2, r3, [r1]
        break;
 8001b20:	e014      	b.n	8001b4c <Ostacolo+0x224>
        if (rtDW.temporalCounter_i4 >= 10U) {
 8001b22:	4b0f      	ldr	r3, [pc, #60]	@ (8001b60 <Ostacolo+0x238>)
 8001b24:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8001b28:	2b09      	cmp	r3, #9
 8001b2a:	d911      	bls.n	8001b50 <Ostacolo+0x228>
          rtDW.temporalCounter_i4 = 0U;
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b60 <Ostacolo+0x238>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
          rtDW.is_Ostacolo_Presente = IN_Blink_OOff;
 8001b34:	4b0a      	ldr	r3, [pc, #40]	@ (8001b60 <Ostacolo+0x238>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          rtY.LedG = OFF;
 8001b3c:	490b      	ldr	r1, [pc, #44]	@ (8001b6c <Ostacolo+0x244>)
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	f04f 0300 	mov.w	r3, #0
 8001b46:	e9c1 2300 	strd	r2, r3, [r1]
        break;
 8001b4a:	e001      	b.n	8001b50 <Ostacolo+0x228>
        break;
 8001b4c:	bf00      	nop
 8001b4e:	e002      	b.n	8001b56 <Ostacolo+0x22e>
        break;
 8001b50:	bf00      	nop
    break;
 8001b52:	e000      	b.n	8001b56 <Ostacolo+0x22e>
    break;
 8001b54:	bf00      	nop
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000080 	.word	0x20000080
 8001b64:	200000c8 	.word	0x200000c8
 8001b68:	3ff00000 	.word	0x3ff00000
 8001b6c:	200000f0 	.word	0x200000f0

08001b70 <Regolazione_Tempo_Chiusura>:

/* Function for Chart: '<Root>/Chart' */
static void Regolazione_Tempo_Chiusura(const int32_T *sfEvent)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  switch (rtDW.is_Regolazione_Tempo_Chiusura) {
 8001b78:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf0 <Regolazione_Tempo_Chiusura+0x80>)
 8001b7a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d002      	beq.n	8001b88 <Regolazione_Tempo_Chiusura+0x18>
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d005      	beq.n	8001b92 <Regolazione_Tempo_Chiusura+0x22>
      rtDW.is_Regolazione_Tempo_Chiusura = IN_Aggiunta_Tempo_Chiusura;
      rtDW.TC = mod(rtDW.TC) + 10.0;
    }
    break;
  }
}
 8001b86:	e02f      	b.n	8001be8 <Regolazione_Tempo_Chiusura+0x78>
    rtDW.is_Regolazione_Tempo_Chiusura = IN_Tempo_Chiusura;
 8001b88:	4b19      	ldr	r3, [pc, #100]	@ (8001bf0 <Regolazione_Tempo_Chiusura+0x80>)
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    break;
 8001b90:	e02a      	b.n	8001be8 <Regolazione_Tempo_Chiusura+0x78>
    if ((rtDW.Var_Chiuso != 0.0) && (*sfEvent == event_buttonpressed2)) {
 8001b92:	4b17      	ldr	r3, [pc, #92]	@ (8001bf0 <Regolazione_Tempo_Chiusura+0x80>)
 8001b94:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001b98:	f04f 0200 	mov.w	r2, #0
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	f7fe ff5e 	bl	8000a60 <__aeabi_dcmpeq>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d000      	beq.n	8001bac <Regolazione_Tempo_Chiusura+0x3c>
    break;
 8001baa:	e01c      	b.n	8001be6 <Regolazione_Tempo_Chiusura+0x76>
    if ((rtDW.Var_Chiuso != 0.0) && (*sfEvent == event_buttonpressed2)) {
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d118      	bne.n	8001be6 <Regolazione_Tempo_Chiusura+0x76>
      rtDW.is_Regolazione_Tempo_Chiusura = IN_Aggiunta_Tempo_Chiusura;
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf0 <Regolazione_Tempo_Chiusura+0x80>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      rtDW.TC = mod(rtDW.TC) + 10.0;
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf0 <Regolazione_Tempo_Chiusura+0x80>)
 8001bbe:	ed93 7b00 	vldr	d7, [r3]
 8001bc2:	eeb0 0a47 	vmov.f32	s0, s14
 8001bc6:	eef0 0a67 	vmov.f32	s1, s15
 8001bca:	f7ff fdf5 	bl	80017b8 <mod>
 8001bce:	ec51 0b10 	vmov	r0, r1, d0
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	4b07      	ldr	r3, [pc, #28]	@ (8001bf4 <Regolazione_Tempo_Chiusura+0x84>)
 8001bd8:	f7fe fb24 	bl	8000224 <__adddf3>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4903      	ldr	r1, [pc, #12]	@ (8001bf0 <Regolazione_Tempo_Chiusura+0x80>)
 8001be2:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 8001be6:	bf00      	nop
}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000080 	.word	0x20000080
 8001bf4:	40240000 	.word	0x40240000

08001bf8 <Chart_step>:

/* Model step function */
void Chart_step(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
  /* Chart: '<Root>/Chart' incorporates:
   *  Inport: '<Root>/B1'
   *  Inport: '<Root>/B2'
   *  Inport: '<Root>/B3'
   */
  if (rtDW.temporalCounter_i1 < MAX_uint32_T) {
 8001bfe:	4ba9      	ldr	r3, [pc, #676]	@ (8001ea4 <Chart_step+0x2ac>)
 8001c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c06:	d004      	beq.n	8001c12 <Chart_step+0x1a>
    rtDW.temporalCounter_i1++;
 8001c08:	4ba6      	ldr	r3, [pc, #664]	@ (8001ea4 <Chart_step+0x2ac>)
 8001c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	4aa5      	ldr	r2, [pc, #660]	@ (8001ea4 <Chart_step+0x2ac>)
 8001c10:	6293      	str	r3, [r2, #40]	@ 0x28
  }

  if (rtDW.temporalCounter_i2 < 31U) {
 8001c12:	4ba4      	ldr	r3, [pc, #656]	@ (8001ea4 <Chart_step+0x2ac>)
 8001c14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001c18:	2b1e      	cmp	r3, #30
 8001c1a:	d807      	bhi.n	8001c2c <Chart_step+0x34>
    rtDW.temporalCounter_i2++;
 8001c1c:	4ba1      	ldr	r3, [pc, #644]	@ (8001ea4 <Chart_step+0x2ac>)
 8001c1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001c22:	3301      	adds	r3, #1
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	4b9f      	ldr	r3, [pc, #636]	@ (8001ea4 <Chart_step+0x2ac>)
 8001c28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  if (rtDW.temporalCounter_i3 < 511U) {
 8001c2c:	4b9d      	ldr	r3, [pc, #628]	@ (8001ea4 <Chart_step+0x2ac>)
 8001c2e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001c30:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 8001c34:	d805      	bhi.n	8001c42 <Chart_step+0x4a>
    rtDW.temporalCounter_i3++;
 8001c36:	4b9b      	ldr	r3, [pc, #620]	@ (8001ea4 <Chart_step+0x2ac>)
 8001c38:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	4b99      	ldr	r3, [pc, #612]	@ (8001ea4 <Chart_step+0x2ac>)
 8001c40:	859a      	strh	r2, [r3, #44]	@ 0x2c
  }

  if (rtDW.temporalCounter_i4 < 15U) {
 8001c42:	4b98      	ldr	r3, [pc, #608]	@ (8001ea4 <Chart_step+0x2ac>)
 8001c44:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8001c48:	2b0e      	cmp	r3, #14
 8001c4a:	d807      	bhi.n	8001c5c <Chart_step+0x64>
    rtDW.temporalCounter_i4++;
 8001c4c:	4b95      	ldr	r3, [pc, #596]	@ (8001ea4 <Chart_step+0x2ac>)
 8001c4e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8001c52:	3301      	adds	r3, #1
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	4b93      	ldr	r3, [pc, #588]	@ (8001ea4 <Chart_step+0x2ac>)
 8001c58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
  }

  sfEvent = CALL_EVENT;
 8001c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c60:	607b      	str	r3, [r7, #4]
  if (rtDW.is_active_c1_Chart == 0U) {
 8001c62:	4b90      	ldr	r3, [pc, #576]	@ (8001ea4 <Chart_step+0x2ac>)
 8001c64:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d175      	bne.n	8001d58 <Chart_step+0x160>
    rtDW.is_active_c1_Chart = 1U;
 8001c6c:	4b8d      	ldr	r3, [pc, #564]	@ (8001ea4 <Chart_step+0x2ac>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
    rtDW.is_c1_Chart = IN_LOGIC;
 8001c74:	4b8b      	ldr	r3, [pc, #556]	@ (8001ea4 <Chart_step+0x2ac>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
    rtDW.is_active_Cancello = 1U;
 8001c7c:	4b89      	ldr	r3, [pc, #548]	@ (8001ea4 <Chart_step+0x2ac>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    rtDW.Var_Inattivo = ON;
 8001c84:	4987      	ldr	r1, [pc, #540]	@ (8001ea4 <Chart_step+0x2ac>)
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	4b87      	ldr	r3, [pc, #540]	@ (8001ea8 <Chart_step+0x2b0>)
 8001c8c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    rtDW.Var_Aperto = OFF;
 8001c90:	4984      	ldr	r1, [pc, #528]	@ (8001ea4 <Chart_step+0x2ac>)
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	e9c1 2308 	strd	r2, r3, [r1, #32]
    rtDW.Var_Chiuso = OFF;
 8001c9e:	4981      	ldr	r1, [pc, #516]	@ (8001ea4 <Chart_step+0x2ac>)
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	f04f 0300 	mov.w	r3, #0
 8001ca8:	e9c1 2306 	strd	r2, r3, [r1, #24]
    rtDW.is_Cancello = IN_Inattivo;
 8001cac:	4b7d      	ldr	r3, [pc, #500]	@ (8001ea4 <Chart_step+0x2ac>)
 8001cae:	2203      	movs	r2, #3
 8001cb0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    /* Outport: '<Root>/LedG' */
    rtY.LedG = OFF;
 8001cb4:	497d      	ldr	r1, [pc, #500]	@ (8001eac <Chart_step+0x2b4>)
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	f04f 0300 	mov.w	r3, #0
 8001cbe:	e9c1 2300 	strd	r2, r3, [r1]

    /* Outport: '<Root>/LedR' */
    rtY.LedR = OFF;
 8001cc2:	497a      	ldr	r1, [pc, #488]	@ (8001eac <Chart_step+0x2b4>)
 8001cc4:	f04f 0200 	mov.w	r2, #0
 8001cc8:	f04f 0300 	mov.w	r3, #0
 8001ccc:	e9c1 2302 	strd	r2, r3, [r1, #8]

    /* Outport: '<Root>/LedY' */
    rtY.LedY = OFF;
 8001cd0:	4976      	ldr	r1, [pc, #472]	@ (8001eac <Chart_step+0x2b4>)
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	f04f 0300 	mov.w	r3, #0
 8001cda:	e9c1 2304 	strd	r2, r3, [r1, #16]
    rtDW.is_active_Regolazione_Tempo_Lav = 1U;
 8001cde:	4b71      	ldr	r3, [pc, #452]	@ (8001ea4 <Chart_step+0x2ac>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    rtDW.TL = 10.0;
 8001ce6:	496f      	ldr	r1, [pc, #444]	@ (8001ea4 <Chart_step+0x2ac>)
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	4b70      	ldr	r3, [pc, #448]	@ (8001eb0 <Chart_step+0x2b8>)
 8001cee:	e9c1 2302 	strd	r2, r3, [r1, #8]
    rtDW.is_Regolazione_Tempo_Lavoro = IN_Tempo_Lavoro;
 8001cf2:	4b6c      	ldr	r3, [pc, #432]	@ (8001ea4 <Chart_step+0x2ac>)
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    rtDW.is_active_Ostacolo = 1U;
 8001cfa:	4b6a      	ldr	r3, [pc, #424]	@ (8001ea4 <Chart_step+0x2ac>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    rtDW.is_Ostacolo = IN_Fermo;
 8001d02:	4b68      	ldr	r3, [pc, #416]	@ (8001ea4 <Chart_step+0x2ac>)
 8001d04:	2202      	movs	r2, #2
 8001d06:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
    rtDW.is_active_BUTTON1 = 1U;
 8001d0a:	4b66      	ldr	r3, [pc, #408]	@ (8001ea4 <Chart_step+0x2ac>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    rtDW.is_BUTTON1 = IN_RELEASED1;
 8001d12:	4b64      	ldr	r3, [pc, #400]	@ (8001ea4 <Chart_step+0x2ac>)
 8001d14:	2203      	movs	r2, #3
 8001d16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    rtDW.is_active_BUTTON3 = 1U;
 8001d1a:	4b62      	ldr	r3, [pc, #392]	@ (8001ea4 <Chart_step+0x2ac>)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    rtDW.is_BUTTON3 = IN_RELEASED3;
 8001d22:	4b60      	ldr	r3, [pc, #384]	@ (8001ea4 <Chart_step+0x2ac>)
 8001d24:	2203      	movs	r2, #3
 8001d26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    rtDW.is_active_BUTTON2 = 1U;
 8001d2a:	4b5e      	ldr	r3, [pc, #376]	@ (8001ea4 <Chart_step+0x2ac>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    rtDW.is_BUTTON2 = IN_RELEASED2;
 8001d32:	4b5c      	ldr	r3, [pc, #368]	@ (8001ea4 <Chart_step+0x2ac>)
 8001d34:	2203      	movs	r2, #3
 8001d36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    rtDW.is_active_Regolazione_Tempo_Chi = 1U;
 8001d3a:	4b5a      	ldr	r3, [pc, #360]	@ (8001ea4 <Chart_step+0x2ac>)
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    rtDW.TC = 10.0;
 8001d42:	4958      	ldr	r1, [pc, #352]	@ (8001ea4 <Chart_step+0x2ac>)
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	4b59      	ldr	r3, [pc, #356]	@ (8001eb0 <Chart_step+0x2b8>)
 8001d4a:	e9c1 2300 	strd	r2, r3, [r1]
    rtDW.is_Regolazione_Tempo_Chiusura = IN_Tempo_Chiusura;
 8001d4e:	4b55      	ldr	r3, [pc, #340]	@ (8001ea4 <Chart_step+0x2ac>)
 8001d50:	2202      	movs	r2, #2
 8001d52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      Regolazione_Tempo_Chiusura(&sfEvent);
    }
  }

  /* End of Chart: '<Root>/Chart' */
}
 8001d56:	e16b      	b.n	8002030 <Chart_step+0x438>
  } else if (rtDW.is_c1_Chart == IN_LOGIC) {
 8001d58:	4b52      	ldr	r3, [pc, #328]	@ (8001ea4 <Chart_step+0x2ac>)
 8001d5a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	f040 8166 	bne.w	8002030 <Chart_step+0x438>
    if (rtDW.is_active_Cancello != 0U) {
 8001d64:	4b4f      	ldr	r3, [pc, #316]	@ (8001ea4 <Chart_step+0x2ac>)
 8001d66:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <Chart_step+0x17e>
      Cancello(&sfEvent);
 8001d6e:	1d3b      	adds	r3, r7, #4
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff fadb 	bl	800132c <Cancello>
    if (rtDW.is_active_Regolazione_Tempo_Lav != 0U) {
 8001d76:	4b4b      	ldr	r3, [pc, #300]	@ (8001ea4 <Chart_step+0x2ac>)
 8001d78:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <Chart_step+0x190>
      Regolazione_Tempo_Lavoro(&sfEvent);
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff fd8c 	bl	80018a0 <Regolazione_Tempo_Lavoro>
    if (rtDW.is_active_Ostacolo != 0U) {
 8001d88:	4b46      	ldr	r3, [pc, #280]	@ (8001ea4 <Chart_step+0x2ac>)
 8001d8a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <Chart_step+0x1a2>
      Ostacolo(&sfEvent);
 8001d92:	1d3b      	adds	r3, r7, #4
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fdc7 	bl	8001928 <Ostacolo>
    if (rtDW.is_active_BUTTON1 != 0U) {
 8001d9a:	4b42      	ldr	r3, [pc, #264]	@ (8001ea4 <Chart_step+0x2ac>)
 8001d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d06e      	beq.n	8001e82 <Chart_step+0x28a>
      switch (rtDW.is_BUTTON1) {
 8001da4:	4b3f      	ldr	r3, [pc, #252]	@ (8001ea4 <Chart_step+0x2ac>)
 8001da6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001daa:	2b03      	cmp	r3, #3
 8001dac:	d058      	beq.n	8001e60 <Chart_step+0x268>
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	dc67      	bgt.n	8001e82 <Chart_step+0x28a>
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d002      	beq.n	8001dbc <Chart_step+0x1c4>
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d029      	beq.n	8001e0e <Chart_step+0x216>
 8001dba:	e062      	b.n	8001e82 <Chart_step+0x28a>
        if (rtU.B1 == OFF) {
 8001dbc:	4b3d      	ldr	r3, [pc, #244]	@ (8001eb4 <Chart_step+0x2bc>)
 8001dbe:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	f04f 0300 	mov.w	r3, #0
 8001dca:	f7fe fe49 	bl	8000a60 <__aeabi_dcmpeq>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d004      	beq.n	8001dde <Chart_step+0x1e6>
          rtDW.is_BUTTON1 = IN_RELEASED1;
 8001dd4:	4b33      	ldr	r3, [pc, #204]	@ (8001ea4 <Chart_step+0x2ac>)
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        break;
 8001ddc:	e051      	b.n	8001e82 <Chart_step+0x28a>
          sfEvent = event_buttonpressed1;
 8001dde:	2300      	movs	r3, #0
 8001de0:	607b      	str	r3, [r7, #4]
          if (rtDW.is_active_Cancello != 0U) {
 8001de2:	4b30      	ldr	r3, [pc, #192]	@ (8001ea4 <Chart_step+0x2ac>)
 8001de4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <Chart_step+0x1fc>
            Cancello(&sfEvent);
 8001dec:	1d3b      	adds	r3, r7, #4
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff fa9c 	bl	800132c <Cancello>
          if (rtDW.is_active_Ostacolo != 0U) {
 8001df4:	4b2b      	ldr	r3, [pc, #172]	@ (8001ea4 <Chart_step+0x2ac>)
 8001df6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <Chart_step+0x20e>
            Ostacolo(&sfEvent);
 8001dfe:	1d3b      	adds	r3, r7, #4
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff fd91 	bl	8001928 <Ostacolo>
          sfEvent = CALL_EVENT;
 8001e06:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0a:	607b      	str	r3, [r7, #4]
        break;
 8001e0c:	e039      	b.n	8001e82 <Chart_step+0x28a>
        if (rtU.B1 == OFF) {
 8001e0e:	4b29      	ldr	r3, [pc, #164]	@ (8001eb4 <Chart_step+0x2bc>)
 8001e10:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001e14:	f04f 0200 	mov.w	r2, #0
 8001e18:	f04f 0300 	mov.w	r3, #0
 8001e1c:	f7fe fe20 	bl	8000a60 <__aeabi_dcmpeq>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d100      	bne.n	8001e28 <Chart_step+0x230>
        break;
 8001e26:	e02c      	b.n	8001e82 <Chart_step+0x28a>
          rtDW.is_BUTTON1 = IN_LONGPRESSED1;
 8001e28:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea4 <Chart_step+0x2ac>)
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          sfEvent = event_buttonpressed1;
 8001e30:	2300      	movs	r3, #0
 8001e32:	607b      	str	r3, [r7, #4]
          if (rtDW.is_active_Cancello != 0U) {
 8001e34:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea4 <Chart_step+0x2ac>)
 8001e36:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <Chart_step+0x24e>
            Cancello(&sfEvent);
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fa73 	bl	800132c <Cancello>
          if (rtDW.is_active_Ostacolo != 0U) {
 8001e46:	4b17      	ldr	r3, [pc, #92]	@ (8001ea4 <Chart_step+0x2ac>)
 8001e48:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <Chart_step+0x260>
            Ostacolo(&sfEvent);
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff fd68 	bl	8001928 <Ostacolo>
          sfEvent = CALL_EVENT;
 8001e58:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5c:	607b      	str	r3, [r7, #4]
        break;
 8001e5e:	e010      	b.n	8001e82 <Chart_step+0x28a>
        if (rtU.B1 == ON) {
 8001e60:	4b14      	ldr	r3, [pc, #80]	@ (8001eb4 <Chart_step+0x2bc>)
 8001e62:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea8 <Chart_step+0x2b0>)
 8001e6c:	f7fe fdf8 	bl	8000a60 <__aeabi_dcmpeq>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d100      	bne.n	8001e78 <Chart_step+0x280>
        break;
 8001e76:	e003      	b.n	8001e80 <Chart_step+0x288>
          rtDW.is_BUTTON1 = IN_PRESSED1;
 8001e78:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea4 <Chart_step+0x2ac>)
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        break;
 8001e80:	bf00      	nop
    if (rtDW.is_active_BUTTON3 != 0U) {
 8001e82:	4b08      	ldr	r3, [pc, #32]	@ (8001ea4 <Chart_step+0x2ac>)
 8001e84:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d066      	beq.n	8001f5a <Chart_step+0x362>
      switch (rtDW.is_BUTTON3) {
 8001e8c:	4b05      	ldr	r3, [pc, #20]	@ (8001ea4 <Chart_step+0x2ac>)
 8001e8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e92:	2b03      	cmp	r3, #3
 8001e94:	d050      	beq.n	8001f38 <Chart_step+0x340>
 8001e96:	2b03      	cmp	r3, #3
 8001e98:	dc5f      	bgt.n	8001f5a <Chart_step+0x362>
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d00c      	beq.n	8001eb8 <Chart_step+0x2c0>
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d02a      	beq.n	8001ef8 <Chart_step+0x300>
 8001ea2:	e05a      	b.n	8001f5a <Chart_step+0x362>
 8001ea4:	20000080 	.word	0x20000080
 8001ea8:	3ff00000 	.word	0x3ff00000
 8001eac:	200000f0 	.word	0x200000f0
 8001eb0:	40240000 	.word	0x40240000
 8001eb4:	200000c8 	.word	0x200000c8
        if (rtU.B3 == OFF) {
 8001eb8:	4b5f      	ldr	r3, [pc, #380]	@ (8002038 <Chart_step+0x440>)
 8001eba:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	f04f 0300 	mov.w	r3, #0
 8001ec6:	f7fe fdcb 	bl	8000a60 <__aeabi_dcmpeq>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d004      	beq.n	8001eda <Chart_step+0x2e2>
          rtDW.is_BUTTON3 = IN_RELEASED3;
 8001ed0:	4b5a      	ldr	r3, [pc, #360]	@ (800203c <Chart_step+0x444>)
 8001ed2:	2203      	movs	r2, #3
 8001ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        break;
 8001ed8:	e03f      	b.n	8001f5a <Chart_step+0x362>
          sfEvent = event_buttonpressed3;
 8001eda:	2302      	movs	r3, #2
 8001edc:	607b      	str	r3, [r7, #4]
          if (rtDW.is_active_Regolazione_Tempo_Lav != 0U) {
 8001ede:	4b57      	ldr	r3, [pc, #348]	@ (800203c <Chart_step+0x444>)
 8001ee0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <Chart_step+0x2f8>
            Regolazione_Tempo_Lavoro(&sfEvent);
 8001ee8:	1d3b      	adds	r3, r7, #4
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff fcd8 	bl	80018a0 <Regolazione_Tempo_Lavoro>
          sfEvent = -1;
 8001ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef4:	607b      	str	r3, [r7, #4]
        break;
 8001ef6:	e030      	b.n	8001f5a <Chart_step+0x362>
        if (rtU.B3 == OFF) {
 8001ef8:	4b4f      	ldr	r3, [pc, #316]	@ (8002038 <Chart_step+0x440>)
 8001efa:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	f04f 0300 	mov.w	r3, #0
 8001f06:	f7fe fdab 	bl	8000a60 <__aeabi_dcmpeq>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d100      	bne.n	8001f12 <Chart_step+0x31a>
        break;
 8001f10:	e023      	b.n	8001f5a <Chart_step+0x362>
          rtDW.is_BUTTON3 = IN_LONGPRESSED3;
 8001f12:	4b4a      	ldr	r3, [pc, #296]	@ (800203c <Chart_step+0x444>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          sfEvent = event_buttonpressed3;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	607b      	str	r3, [r7, #4]
          if (rtDW.is_active_Regolazione_Tempo_Lav != 0U) {
 8001f1e:	4b47      	ldr	r3, [pc, #284]	@ (800203c <Chart_step+0x444>)
 8001f20:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <Chart_step+0x338>
            Regolazione_Tempo_Lavoro(&sfEvent);
 8001f28:	1d3b      	adds	r3, r7, #4
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff fcb8 	bl	80018a0 <Regolazione_Tempo_Lavoro>
          sfEvent = -1;
 8001f30:	f04f 33ff 	mov.w	r3, #4294967295
 8001f34:	607b      	str	r3, [r7, #4]
        break;
 8001f36:	e010      	b.n	8001f5a <Chart_step+0x362>
        if (rtU.B3 == ON) {
 8001f38:	4b3f      	ldr	r3, [pc, #252]	@ (8002038 <Chart_step+0x440>)
 8001f3a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	4b3f      	ldr	r3, [pc, #252]	@ (8002040 <Chart_step+0x448>)
 8001f44:	f7fe fd8c 	bl	8000a60 <__aeabi_dcmpeq>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d100      	bne.n	8001f50 <Chart_step+0x358>
        break;
 8001f4e:	e003      	b.n	8001f58 <Chart_step+0x360>
          rtDW.is_BUTTON3 = IN_PRESSED3;
 8001f50:	4b3a      	ldr	r3, [pc, #232]	@ (800203c <Chart_step+0x444>)
 8001f52:	2202      	movs	r2, #2
 8001f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        break;
 8001f58:	bf00      	nop
    if (rtDW.is_active_BUTTON2 != 0U) {
 8001f5a:	4b38      	ldr	r3, [pc, #224]	@ (800203c <Chart_step+0x444>)
 8001f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d05c      	beq.n	800201e <Chart_step+0x426>
      switch (rtDW.is_BUTTON2) {
 8001f64:	4b35      	ldr	r3, [pc, #212]	@ (800203c <Chart_step+0x444>)
 8001f66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001f6a:	2b03      	cmp	r3, #3
 8001f6c:	d046      	beq.n	8001ffc <Chart_step+0x404>
 8001f6e:	2b03      	cmp	r3, #3
 8001f70:	dc55      	bgt.n	800201e <Chart_step+0x426>
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d002      	beq.n	8001f7c <Chart_step+0x384>
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d020      	beq.n	8001fbc <Chart_step+0x3c4>
 8001f7a:	e050      	b.n	800201e <Chart_step+0x426>
        if (rtU.B2 == OFF) {
 8001f7c:	4b2e      	ldr	r3, [pc, #184]	@ (8002038 <Chart_step+0x440>)
 8001f7e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001f82:	f04f 0200 	mov.w	r2, #0
 8001f86:	f04f 0300 	mov.w	r3, #0
 8001f8a:	f7fe fd69 	bl	8000a60 <__aeabi_dcmpeq>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d004      	beq.n	8001f9e <Chart_step+0x3a6>
          rtDW.is_BUTTON2 = IN_RELEASED2;
 8001f94:	4b29      	ldr	r3, [pc, #164]	@ (800203c <Chart_step+0x444>)
 8001f96:	2203      	movs	r2, #3
 8001f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        break;
 8001f9c:	e03f      	b.n	800201e <Chart_step+0x426>
          sfEvent = event_buttonpressed2;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	607b      	str	r3, [r7, #4]
          if (rtDW.is_active_Regolazione_Tempo_Chi != 0U) {
 8001fa2:	4b26      	ldr	r3, [pc, #152]	@ (800203c <Chart_step+0x444>)
 8001fa4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <Chart_step+0x3bc>
            Regolazione_Tempo_Chiusura(&sfEvent);
 8001fac:	1d3b      	adds	r3, r7, #4
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff fdde 	bl	8001b70 <Regolazione_Tempo_Chiusura>
          sfEvent = -1;
 8001fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb8:	607b      	str	r3, [r7, #4]
        break;
 8001fba:	e030      	b.n	800201e <Chart_step+0x426>
        if (rtU.B2 == OFF) {
 8001fbc:	4b1e      	ldr	r3, [pc, #120]	@ (8002038 <Chart_step+0x440>)
 8001fbe:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	f04f 0300 	mov.w	r3, #0
 8001fca:	f7fe fd49 	bl	8000a60 <__aeabi_dcmpeq>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d100      	bne.n	8001fd6 <Chart_step+0x3de>
        break;
 8001fd4:	e023      	b.n	800201e <Chart_step+0x426>
          rtDW.is_BUTTON2 = IN_LONGPRESSED2;
 8001fd6:	4b19      	ldr	r3, [pc, #100]	@ (800203c <Chart_step+0x444>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          sfEvent = event_buttonpressed2;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	607b      	str	r3, [r7, #4]
          if (rtDW.is_active_Regolazione_Tempo_Chi != 0U) {
 8001fe2:	4b16      	ldr	r3, [pc, #88]	@ (800203c <Chart_step+0x444>)
 8001fe4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <Chart_step+0x3fc>
            Regolazione_Tempo_Chiusura(&sfEvent);
 8001fec:	1d3b      	adds	r3, r7, #4
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fdbe 	bl	8001b70 <Regolazione_Tempo_Chiusura>
          sfEvent = -1;
 8001ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff8:	607b      	str	r3, [r7, #4]
        break;
 8001ffa:	e010      	b.n	800201e <Chart_step+0x426>
        if (rtU.B2 == ON) {
 8001ffc:	4b0e      	ldr	r3, [pc, #56]	@ (8002038 <Chart_step+0x440>)
 8001ffe:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	4b0e      	ldr	r3, [pc, #56]	@ (8002040 <Chart_step+0x448>)
 8002008:	f7fe fd2a 	bl	8000a60 <__aeabi_dcmpeq>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d100      	bne.n	8002014 <Chart_step+0x41c>
        break;
 8002012:	e003      	b.n	800201c <Chart_step+0x424>
          rtDW.is_BUTTON2 = IN_PRESSED2;
 8002014:	4b09      	ldr	r3, [pc, #36]	@ (800203c <Chart_step+0x444>)
 8002016:	2202      	movs	r2, #2
 8002018:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        break;
 800201c:	bf00      	nop
    if (rtDW.is_active_Regolazione_Tempo_Chi != 0U) {
 800201e:	4b07      	ldr	r3, [pc, #28]	@ (800203c <Chart_step+0x444>)
 8002020:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <Chart_step+0x438>
      Regolazione_Tempo_Chiusura(&sfEvent);
 8002028:	1d3b      	adds	r3, r7, #4
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff fda0 	bl	8001b70 <Regolazione_Tempo_Chiusura>
}
 8002030:	bf00      	nop
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	200000c8 	.word	0x200000c8
 800203c:	20000080 	.word	0x20000080
 8002040:	3ff00000 	.word	0x3ff00000

08002044 <Chart_initialize>:

/* Model initialize function */
void Chart_initialize(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* Registration code */

  /* initialize non-finites */
  rt_InitInfAndNaN(sizeof(real_T));
 8002048:	2008      	movs	r0, #8
 800204a:	f7fe fe05 	bl	8000c58 <rt_InitInfAndNaN>

  /* SystemInitialize for Chart: '<Root>/Chart' */
  rtDW.TC = 10.0;
 800204e:	4907      	ldr	r1, [pc, #28]	@ (800206c <Chart_initialize+0x28>)
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	4b06      	ldr	r3, [pc, #24]	@ (8002070 <Chart_initialize+0x2c>)
 8002056:	e9c1 2300 	strd	r2, r3, [r1]
  rtDW.TL = 10.0;
 800205a:	4904      	ldr	r1, [pc, #16]	@ (800206c <Chart_initialize+0x28>)
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	4b03      	ldr	r3, [pc, #12]	@ (8002070 <Chart_initialize+0x2c>)
 8002062:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000080 	.word	0x20000080
 8002070:	40240000 	.word	0x40240000

08002074 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207a:	f107 030c 	add.w	r3, r7, #12
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	605a      	str	r2, [r3, #4]
 8002084:	609a      	str	r2, [r3, #8]
 8002086:	60da      	str	r2, [r3, #12]
 8002088:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800208a:	4b1e      	ldr	r3, [pc, #120]	@ (8002104 <MX_GPIO_Init+0x90>)
 800208c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800208e:	4a1d      	ldr	r2, [pc, #116]	@ (8002104 <MX_GPIO_Init+0x90>)
 8002090:	f043 0304 	orr.w	r3, r3, #4
 8002094:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002096:	4b1b      	ldr	r3, [pc, #108]	@ (8002104 <MX_GPIO_Init+0x90>)
 8002098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209a:	f003 0304 	and.w	r3, r3, #4
 800209e:	60bb      	str	r3, [r7, #8]
 80020a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a2:	4b18      	ldr	r3, [pc, #96]	@ (8002104 <MX_GPIO_Init+0x90>)
 80020a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020a6:	4a17      	ldr	r2, [pc, #92]	@ (8002104 <MX_GPIO_Init+0x90>)
 80020a8:	f043 0302 	orr.w	r3, r3, #2
 80020ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020ae:	4b15      	ldr	r3, [pc, #84]	@ (8002104 <MX_GPIO_Init+0x90>)
 80020b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	607b      	str	r3, [r7, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LedR_Pin|LedY_Pin|LedG_Pin, GPIO_PIN_RESET);
 80020ba:	2200      	movs	r2, #0
 80020bc:	2138      	movs	r1, #56	@ 0x38
 80020be:	4812      	ldr	r0, [pc, #72]	@ (8002108 <MX_GPIO_Init+0x94>)
 80020c0:	f000 fcc2 	bl	8002a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = button_Pin|P1_Pin|P2_Pin|B3_Pin
 80020c4:	f242 136c 	movw	r3, #8556	@ 0x216c
 80020c8:	60fb      	str	r3, [r7, #12]
                          |B2_Pin|B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020d2:	f107 030c 	add.w	r3, r7, #12
 80020d6:	4619      	mov	r1, r3
 80020d8:	480c      	ldr	r0, [pc, #48]	@ (800210c <MX_GPIO_Init+0x98>)
 80020da:	f000 fb1b 	bl	8002714 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LedR_Pin|LedY_Pin|LedG_Pin;
 80020de:	2338      	movs	r3, #56	@ 0x38
 80020e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e2:	2301      	movs	r3, #1
 80020e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ee:	f107 030c 	add.w	r3, r7, #12
 80020f2:	4619      	mov	r1, r3
 80020f4:	4804      	ldr	r0, [pc, #16]	@ (8002108 <MX_GPIO_Init+0x94>)
 80020f6:	f000 fb0d 	bl	8002714 <HAL_GPIO_Init>

}
 80020fa:	bf00      	nop
 80020fc:	3720      	adds	r7, #32
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40021000 	.word	0x40021000
 8002108:	48000400 	.word	0x48000400
 800210c:	48000800 	.word	0x48000800

08002110 <Chart_read_inputs>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void Chart_read_inputs(){
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
	rtU.B1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8002114:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002118:	4825      	ldr	r0, [pc, #148]	@ (80021b0 <Chart_read_inputs+0xa0>)
 800211a:	f000 fc7d 	bl	8002a18 <HAL_GPIO_ReadPin>
 800211e:	4603      	mov	r3, r0
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe f9bb 	bl	800049c <__aeabi_ui2d>
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	4922      	ldr	r1, [pc, #136]	@ (80021b4 <Chart_read_inputs+0xa4>)
 800212c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	rtU.B2 = HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin);
 8002130:	2140      	movs	r1, #64	@ 0x40
 8002132:	481f      	ldr	r0, [pc, #124]	@ (80021b0 <Chart_read_inputs+0xa0>)
 8002134:	f000 fc70 	bl	8002a18 <HAL_GPIO_ReadPin>
 8002138:	4603      	mov	r3, r0
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe f9ae 	bl	800049c <__aeabi_ui2d>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	491b      	ldr	r1, [pc, #108]	@ (80021b4 <Chart_read_inputs+0xa4>)
 8002146:	e9c1 2306 	strd	r2, r3, [r1, #24]
	rtU.B3 = HAL_GPIO_ReadPin(B3_GPIO_Port, B3_Pin);
 800214a:	2120      	movs	r1, #32
 800214c:	4818      	ldr	r0, [pc, #96]	@ (80021b0 <Chart_read_inputs+0xa0>)
 800214e:	f000 fc63 	bl	8002a18 <HAL_GPIO_ReadPin>
 8002152:	4603      	mov	r3, r0
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe f9a1 	bl	800049c <__aeabi_ui2d>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	4915      	ldr	r1, [pc, #84]	@ (80021b4 <Chart_read_inputs+0xa4>)
 8002160:	e9c1 2308 	strd	r2, r3, [r1, #32]
	rtU.P1 = !HAL_GPIO_ReadPin(P1_GPIO_Port, P1_Pin);
 8002164:	2104      	movs	r1, #4
 8002166:	4812      	ldr	r0, [pc, #72]	@ (80021b0 <Chart_read_inputs+0xa0>)
 8002168:	f000 fc56 	bl	8002a18 <HAL_GPIO_ReadPin>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d103      	bne.n	800217a <Chart_read_inputs+0x6a>
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	4b10      	ldr	r3, [pc, #64]	@ (80021b8 <Chart_read_inputs+0xa8>)
 8002178:	e003      	b.n	8002182 <Chart_read_inputs+0x72>
 800217a:	f04f 0200 	mov.w	r2, #0
 800217e:	f04f 0300 	mov.w	r3, #0
 8002182:	490c      	ldr	r1, [pc, #48]	@ (80021b4 <Chart_read_inputs+0xa4>)
 8002184:	e9c1 2300 	strd	r2, r3, [r1]
	rtU.P2 = !HAL_GPIO_ReadPin(P2_GPIO_Port, P2_Pin);
 8002188:	2108      	movs	r1, #8
 800218a:	4809      	ldr	r0, [pc, #36]	@ (80021b0 <Chart_read_inputs+0xa0>)
 800218c:	f000 fc44 	bl	8002a18 <HAL_GPIO_ReadPin>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d103      	bne.n	800219e <Chart_read_inputs+0x8e>
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	4b07      	ldr	r3, [pc, #28]	@ (80021b8 <Chart_read_inputs+0xa8>)
 800219c:	e003      	b.n	80021a6 <Chart_read_inputs+0x96>
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	f04f 0300 	mov.w	r3, #0
 80021a6:	4903      	ldr	r1, [pc, #12]	@ (80021b4 <Chart_read_inputs+0xa4>)
 80021a8:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 80021ac:	bf00      	nop
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	48000800 	.word	0x48000800
 80021b4:	200000c8 	.word	0x200000c8
 80021b8:	3ff00000 	.word	0x3ff00000

080021bc <Chart_write_outputs>:

static void Chart_write_outputs(){
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LedG_GPIO_Port, LedG_Pin, rtY.LedG);
 80021c0:	4b15      	ldr	r3, [pc, #84]	@ (8002218 <Chart_write_outputs+0x5c>)
 80021c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c6:	4610      	mov	r0, r2
 80021c8:	4619      	mov	r1, r3
 80021ca:	f7fe fc91 	bl	8000af0 <__aeabi_d2uiz>
 80021ce:	4603      	mov	r3, r0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	461a      	mov	r2, r3
 80021d4:	2120      	movs	r1, #32
 80021d6:	4811      	ldr	r0, [pc, #68]	@ (800221c <Chart_write_outputs+0x60>)
 80021d8:	f000 fc36 	bl	8002a48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LedY_GPIO_Port, LedY_Pin, rtY.LedY);
 80021dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002218 <Chart_write_outputs+0x5c>)
 80021de:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80021e2:	4610      	mov	r0, r2
 80021e4:	4619      	mov	r1, r3
 80021e6:	f7fe fc83 	bl	8000af0 <__aeabi_d2uiz>
 80021ea:	4603      	mov	r3, r0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	461a      	mov	r2, r3
 80021f0:	2110      	movs	r1, #16
 80021f2:	480a      	ldr	r0, [pc, #40]	@ (800221c <Chart_write_outputs+0x60>)
 80021f4:	f000 fc28 	bl	8002a48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LedR_GPIO_Port, LedR_Pin, rtY.LedR);
 80021f8:	4b07      	ldr	r3, [pc, #28]	@ (8002218 <Chart_write_outputs+0x5c>)
 80021fa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80021fe:	4610      	mov	r0, r2
 8002200:	4619      	mov	r1, r3
 8002202:	f7fe fc75 	bl	8000af0 <__aeabi_d2uiz>
 8002206:	4603      	mov	r3, r0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	461a      	mov	r2, r3
 800220c:	2108      	movs	r1, #8
 800220e:	4803      	ldr	r0, [pc, #12]	@ (800221c <Chart_write_outputs+0x60>)
 8002210:	f000 fc1a 	bl	8002a48 <HAL_GPIO_WritePin>
}
 8002214:	bf00      	nop
 8002216:	bd80      	pop	{r7, pc}
 8002218:	200000f0 	.word	0x200000f0
 800221c:	48000400 	.word	0x48000400

08002220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002226:	f000 f8fe 	bl	8002426 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800222a:	f000 f81b 	bl	8002264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800222e:	f7ff ff21 	bl	8002074 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  Chart_initialize();
 8002232:	f7ff ff07 	bl	8002044 <Chart_initialize>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  uint32_t elapsed, start;
	  start = HAL_GetTick();
 8002236:	f000 f95b 	bl	80024f0 <HAL_GetTick>
 800223a:	6078      	str	r0, [r7, #4]

	  Chart_read_inputs();
 800223c:	f7ff ff68 	bl	8002110 <Chart_read_inputs>
	  Chart_step();
 8002240:	f7ff fcda 	bl	8001bf8 <Chart_step>
	  Chart_write_outputs();
 8002244:	f7ff ffba 	bl	80021bc <Chart_write_outputs>

	  elapsed = HAL_GetTick() - start;
 8002248:	f000 f952 	bl	80024f0 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	603b      	str	r3, [r7, #0]
	  HAL_Delay(100-elapsed);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 800225a:	4618      	mov	r0, r3
 800225c:	f000 f954 	bl	8002508 <HAL_Delay>
  {
 8002260:	bf00      	nop
 8002262:	e7e8      	b.n	8002236 <main+0x16>

08002264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b094      	sub	sp, #80	@ 0x50
 8002268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800226a:	f107 0318 	add.w	r3, r7, #24
 800226e:	2238      	movs	r2, #56	@ 0x38
 8002270:	2100      	movs	r1, #0
 8002272:	4618      	mov	r0, r3
 8002274:	f001 f9aa 	bl	80035cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002278:	1d3b      	adds	r3, r7, #4
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	605a      	str	r2, [r3, #4]
 8002280:	609a      	str	r2, [r3, #8]
 8002282:	60da      	str	r2, [r3, #12]
 8002284:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002286:	2000      	movs	r0, #0
 8002288:	f000 fbf6 	bl	8002a78 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800228c:	2302      	movs	r3, #2
 800228e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002290:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002294:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002296:	2340      	movs	r3, #64	@ 0x40
 8002298:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800229a:	2302      	movs	r3, #2
 800229c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800229e:	2302      	movs	r3, #2
 80022a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80022a2:	2304      	movs	r3, #4
 80022a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80022a6:	2355      	movs	r3, #85	@ 0x55
 80022a8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022aa:	2302      	movs	r3, #2
 80022ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80022ae:	2302      	movs	r3, #2
 80022b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80022b2:	2302      	movs	r3, #2
 80022b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022b6:	f107 0318 	add.w	r3, r7, #24
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 fc90 	bl	8002be0 <HAL_RCC_OscConfig>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80022c6:	f000 f818 	bl	80022fa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022ca:	230f      	movs	r3, #15
 80022cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022ce:	2303      	movs	r3, #3
 80022d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80022de:	1d3b      	adds	r3, r7, #4
 80022e0:	2104      	movs	r1, #4
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 ff8e 	bl	8003204 <HAL_RCC_ClockConfig>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80022ee:	f000 f804 	bl	80022fa <Error_Handler>
  }
}
 80022f2:	bf00      	nop
 80022f4:	3750      	adds	r7, #80	@ 0x50
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022fa:	b480      	push	{r7}
 80022fc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022fe:	b672      	cpsid	i
}
 8002300:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002302:	bf00      	nop
 8002304:	e7fd      	b.n	8002302 <Error_Handler+0x8>
	...

08002308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230e:	4b0f      	ldr	r3, [pc, #60]	@ (800234c <HAL_MspInit+0x44>)
 8002310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002312:	4a0e      	ldr	r2, [pc, #56]	@ (800234c <HAL_MspInit+0x44>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	6613      	str	r3, [r2, #96]	@ 0x60
 800231a:	4b0c      	ldr	r3, [pc, #48]	@ (800234c <HAL_MspInit+0x44>)
 800231c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	607b      	str	r3, [r7, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002326:	4b09      	ldr	r3, [pc, #36]	@ (800234c <HAL_MspInit+0x44>)
 8002328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232a:	4a08      	ldr	r2, [pc, #32]	@ (800234c <HAL_MspInit+0x44>)
 800232c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002330:	6593      	str	r3, [r2, #88]	@ 0x58
 8002332:	4b06      	ldr	r3, [pc, #24]	@ (800234c <HAL_MspInit+0x44>)
 8002334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800233e:	f000 fc3f 	bl	8002bc0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40021000 	.word	0x40021000

08002350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002354:	bf00      	nop
 8002356:	e7fd      	b.n	8002354 <NMI_Handler+0x4>

08002358 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800235c:	bf00      	nop
 800235e:	e7fd      	b.n	800235c <HardFault_Handler+0x4>

08002360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002364:	bf00      	nop
 8002366:	e7fd      	b.n	8002364 <MemManage_Handler+0x4>

08002368 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800236c:	bf00      	nop
 800236e:	e7fd      	b.n	800236c <BusFault_Handler+0x4>

08002370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002374:	bf00      	nop
 8002376:	e7fd      	b.n	8002374 <UsageFault_Handler+0x4>

08002378 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023a6:	f000 f891 	bl	80024cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80023b4:	4b06      	ldr	r3, [pc, #24]	@ (80023d0 <SystemInit+0x20>)
 80023b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ba:	4a05      	ldr	r2, [pc, #20]	@ (80023d0 <SystemInit+0x20>)
 80023bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023d4:	480d      	ldr	r0, [pc, #52]	@ (800240c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023d6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023d8:	f7ff ffea 	bl	80023b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023dc:	480c      	ldr	r0, [pc, #48]	@ (8002410 <LoopForever+0x6>)
  ldr r1, =_edata
 80023de:	490d      	ldr	r1, [pc, #52]	@ (8002414 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002418 <LoopForever+0xe>)
  movs r3, #0
 80023e2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80023e4:	e002      	b.n	80023ec <LoopCopyDataInit>

080023e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ea:	3304      	adds	r3, #4

080023ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023f0:	d3f9      	bcc.n	80023e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023f2:	4a0a      	ldr	r2, [pc, #40]	@ (800241c <LoopForever+0x12>)
  ldr r4, =_ebss
 80023f4:	4c0a      	ldr	r4, [pc, #40]	@ (8002420 <LoopForever+0x16>)
  movs r3, #0
 80023f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023f8:	e001      	b.n	80023fe <LoopFillZerobss>

080023fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023fc:	3204      	adds	r2, #4

080023fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002400:	d3fb      	bcc.n	80023fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002402:	f001 f8f1 	bl	80035e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002406:	f7ff ff0b 	bl	8002220 <main>

0800240a <LoopForever>:

LoopForever:
    b LoopForever
 800240a:	e7fe      	b.n	800240a <LoopForever>
  ldr   r0, =_estack
 800240c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002414:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002418:	080039e0 	.word	0x080039e0
  ldr r2, =_sbss
 800241c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002420:	20000268 	.word	0x20000268

08002424 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002424:	e7fe      	b.n	8002424 <ADC1_2_IRQHandler>

08002426 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800242c:	2300      	movs	r3, #0
 800242e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002430:	2003      	movs	r0, #3
 8002432:	f000 f93d 	bl	80026b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002436:	2000      	movs	r0, #0
 8002438:	f000 f80e 	bl	8002458 <HAL_InitTick>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	71fb      	strb	r3, [r7, #7]
 8002446:	e001      	b.n	800244c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002448:	f7ff ff5e 	bl	8002308 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800244c:	79fb      	ldrb	r3, [r7, #7]

}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
	...

08002458 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002460:	2300      	movs	r3, #0
 8002462:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002464:	4b16      	ldr	r3, [pc, #88]	@ (80024c0 <HAL_InitTick+0x68>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d022      	beq.n	80024b2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800246c:	4b15      	ldr	r3, [pc, #84]	@ (80024c4 <HAL_InitTick+0x6c>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	4b13      	ldr	r3, [pc, #76]	@ (80024c0 <HAL_InitTick+0x68>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002478:	fbb1 f3f3 	udiv	r3, r1, r3
 800247c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002480:	4618      	mov	r0, r3
 8002482:	f000 f93a 	bl	80026fa <HAL_SYSTICK_Config>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10f      	bne.n	80024ac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b0f      	cmp	r3, #15
 8002490:	d809      	bhi.n	80024a6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002492:	2200      	movs	r2, #0
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	f04f 30ff 	mov.w	r0, #4294967295
 800249a:	f000 f914 	bl	80026c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800249e:	4a0a      	ldr	r2, [pc, #40]	@ (80024c8 <HAL_InitTick+0x70>)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6013      	str	r3, [r2, #0]
 80024a4:	e007      	b.n	80024b6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	73fb      	strb	r3, [r7, #15]
 80024aa:	e004      	b.n	80024b6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	73fb      	strb	r3, [r7, #15]
 80024b0:	e001      	b.n	80024b6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	20000008 	.word	0x20000008
 80024c4:	20000000 	.word	0x20000000
 80024c8:	20000004 	.word	0x20000004

080024cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d0:	4b05      	ldr	r3, [pc, #20]	@ (80024e8 <HAL_IncTick+0x1c>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4b05      	ldr	r3, [pc, #20]	@ (80024ec <HAL_IncTick+0x20>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4413      	add	r3, r2
 80024da:	4a03      	ldr	r2, [pc, #12]	@ (80024e8 <HAL_IncTick+0x1c>)
 80024dc:	6013      	str	r3, [r2, #0]
}
 80024de:	bf00      	nop
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	2000012c 	.word	0x2000012c
 80024ec:	20000008 	.word	0x20000008

080024f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return uwTick;
 80024f4:	4b03      	ldr	r3, [pc, #12]	@ (8002504 <HAL_GetTick+0x14>)
 80024f6:	681b      	ldr	r3, [r3, #0]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	2000012c 	.word	0x2000012c

08002508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002510:	f7ff ffee 	bl	80024f0 <HAL_GetTick>
 8002514:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002520:	d004      	beq.n	800252c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002522:	4b09      	ldr	r3, [pc, #36]	@ (8002548 <HAL_Delay+0x40>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	4413      	add	r3, r2
 800252a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800252c:	bf00      	nop
 800252e:	f7ff ffdf 	bl	80024f0 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	429a      	cmp	r2, r3
 800253c:	d8f7      	bhi.n	800252e <HAL_Delay+0x26>
  {
  }
}
 800253e:	bf00      	nop
 8002540:	bf00      	nop
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20000008 	.word	0x20000008

0800254c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800255c:	4b0c      	ldr	r3, [pc, #48]	@ (8002590 <__NVIC_SetPriorityGrouping+0x44>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002568:	4013      	ands	r3, r2
 800256a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002574:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002578:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800257c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800257e:	4a04      	ldr	r2, [pc, #16]	@ (8002590 <__NVIC_SetPriorityGrouping+0x44>)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	60d3      	str	r3, [r2, #12]
}
 8002584:	bf00      	nop
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002598:	4b04      	ldr	r3, [pc, #16]	@ (80025ac <__NVIC_GetPriorityGrouping+0x18>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	0a1b      	lsrs	r3, r3, #8
 800259e:	f003 0307 	and.w	r3, r3, #7
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	e000ed00 	.word	0xe000ed00

080025b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	6039      	str	r1, [r7, #0]
 80025ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	db0a      	blt.n	80025da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	490c      	ldr	r1, [pc, #48]	@ (80025fc <__NVIC_SetPriority+0x4c>)
 80025ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ce:	0112      	lsls	r2, r2, #4
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	440b      	add	r3, r1
 80025d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025d8:	e00a      	b.n	80025f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	4908      	ldr	r1, [pc, #32]	@ (8002600 <__NVIC_SetPriority+0x50>)
 80025e0:	79fb      	ldrb	r3, [r7, #7]
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	3b04      	subs	r3, #4
 80025e8:	0112      	lsls	r2, r2, #4
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	440b      	add	r3, r1
 80025ee:	761a      	strb	r2, [r3, #24]
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	e000e100 	.word	0xe000e100
 8002600:	e000ed00 	.word	0xe000ed00

08002604 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002604:	b480      	push	{r7}
 8002606:	b089      	sub	sp, #36	@ 0x24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f1c3 0307 	rsb	r3, r3, #7
 800261e:	2b04      	cmp	r3, #4
 8002620:	bf28      	it	cs
 8002622:	2304      	movcs	r3, #4
 8002624:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3304      	adds	r3, #4
 800262a:	2b06      	cmp	r3, #6
 800262c:	d902      	bls.n	8002634 <NVIC_EncodePriority+0x30>
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	3b03      	subs	r3, #3
 8002632:	e000      	b.n	8002636 <NVIC_EncodePriority+0x32>
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002638:	f04f 32ff 	mov.w	r2, #4294967295
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43da      	mvns	r2, r3
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	401a      	ands	r2, r3
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800264c:	f04f 31ff 	mov.w	r1, #4294967295
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	fa01 f303 	lsl.w	r3, r1, r3
 8002656:	43d9      	mvns	r1, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800265c:	4313      	orrs	r3, r2
         );
}
 800265e:	4618      	mov	r0, r3
 8002660:	3724      	adds	r7, #36	@ 0x24
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
	...

0800266c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3b01      	subs	r3, #1
 8002678:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800267c:	d301      	bcc.n	8002682 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800267e:	2301      	movs	r3, #1
 8002680:	e00f      	b.n	80026a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002682:	4a0a      	ldr	r2, [pc, #40]	@ (80026ac <SysTick_Config+0x40>)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3b01      	subs	r3, #1
 8002688:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800268a:	210f      	movs	r1, #15
 800268c:	f04f 30ff 	mov.w	r0, #4294967295
 8002690:	f7ff ff8e 	bl	80025b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002694:	4b05      	ldr	r3, [pc, #20]	@ (80026ac <SysTick_Config+0x40>)
 8002696:	2200      	movs	r2, #0
 8002698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800269a:	4b04      	ldr	r3, [pc, #16]	@ (80026ac <SysTick_Config+0x40>)
 800269c:	2207      	movs	r2, #7
 800269e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	e000e010 	.word	0xe000e010

080026b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7ff ff47 	bl	800254c <__NVIC_SetPriorityGrouping>
}
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b086      	sub	sp, #24
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	4603      	mov	r3, r0
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	607a      	str	r2, [r7, #4]
 80026d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026d4:	f7ff ff5e 	bl	8002594 <__NVIC_GetPriorityGrouping>
 80026d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	68b9      	ldr	r1, [r7, #8]
 80026de:	6978      	ldr	r0, [r7, #20]
 80026e0:	f7ff ff90 	bl	8002604 <NVIC_EncodePriority>
 80026e4:	4602      	mov	r2, r0
 80026e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ea:	4611      	mov	r1, r2
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff ff5f 	bl	80025b0 <__NVIC_SetPriority>
}
 80026f2:	bf00      	nop
 80026f4:	3718      	adds	r7, #24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7ff ffb2 	bl	800266c <SysTick_Config>
 8002708:	4603      	mov	r3, r0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
	...

08002714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002714:	b480      	push	{r7}
 8002716:	b087      	sub	sp, #28
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002722:	e15a      	b.n	80029da <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	2101      	movs	r1, #1
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	fa01 f303 	lsl.w	r3, r1, r3
 8002730:	4013      	ands	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 814c 	beq.w	80029d4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 0303 	and.w	r3, r3, #3
 8002744:	2b01      	cmp	r3, #1
 8002746:	d005      	beq.n	8002754 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002750:	2b02      	cmp	r3, #2
 8002752:	d130      	bne.n	80027b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	2203      	movs	r2, #3
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4013      	ands	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	4313      	orrs	r3, r2
 800277c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800278a:	2201      	movs	r2, #1
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43db      	mvns	r3, r3
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	4013      	ands	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	091b      	lsrs	r3, r3, #4
 80027a0:	f003 0201 	and.w	r2, r3, #1
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	2b03      	cmp	r3, #3
 80027c0:	d017      	beq.n	80027f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	2203      	movs	r2, #3
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	43db      	mvns	r3, r3
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	4013      	ands	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d123      	bne.n	8002846 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	08da      	lsrs	r2, r3, #3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3208      	adds	r2, #8
 8002806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800280a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	220f      	movs	r2, #15
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43db      	mvns	r3, r3
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4013      	ands	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	691a      	ldr	r2, [r3, #16]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	08da      	lsrs	r2, r3, #3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3208      	adds	r2, #8
 8002840:	6939      	ldr	r1, [r7, #16]
 8002842:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	2203      	movs	r2, #3
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43db      	mvns	r3, r3
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	4013      	ands	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f003 0203 	and.w	r2, r3, #3
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	4313      	orrs	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 80a6 	beq.w	80029d4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002888:	4b5b      	ldr	r3, [pc, #364]	@ (80029f8 <HAL_GPIO_Init+0x2e4>)
 800288a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800288c:	4a5a      	ldr	r2, [pc, #360]	@ (80029f8 <HAL_GPIO_Init+0x2e4>)
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	6613      	str	r3, [r2, #96]	@ 0x60
 8002894:	4b58      	ldr	r3, [pc, #352]	@ (80029f8 <HAL_GPIO_Init+0x2e4>)
 8002896:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028a0:	4a56      	ldr	r2, [pc, #344]	@ (80029fc <HAL_GPIO_Init+0x2e8>)
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	089b      	lsrs	r3, r3, #2
 80028a6:	3302      	adds	r3, #2
 80028a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f003 0303 	and.w	r3, r3, #3
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	220f      	movs	r2, #15
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4013      	ands	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80028ca:	d01f      	beq.n	800290c <HAL_GPIO_Init+0x1f8>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a4c      	ldr	r2, [pc, #304]	@ (8002a00 <HAL_GPIO_Init+0x2ec>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d019      	beq.n	8002908 <HAL_GPIO_Init+0x1f4>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a4b      	ldr	r2, [pc, #300]	@ (8002a04 <HAL_GPIO_Init+0x2f0>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d013      	beq.n	8002904 <HAL_GPIO_Init+0x1f0>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a4a      	ldr	r2, [pc, #296]	@ (8002a08 <HAL_GPIO_Init+0x2f4>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d00d      	beq.n	8002900 <HAL_GPIO_Init+0x1ec>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a49      	ldr	r2, [pc, #292]	@ (8002a0c <HAL_GPIO_Init+0x2f8>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d007      	beq.n	80028fc <HAL_GPIO_Init+0x1e8>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a48      	ldr	r2, [pc, #288]	@ (8002a10 <HAL_GPIO_Init+0x2fc>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d101      	bne.n	80028f8 <HAL_GPIO_Init+0x1e4>
 80028f4:	2305      	movs	r3, #5
 80028f6:	e00a      	b.n	800290e <HAL_GPIO_Init+0x1fa>
 80028f8:	2306      	movs	r3, #6
 80028fa:	e008      	b.n	800290e <HAL_GPIO_Init+0x1fa>
 80028fc:	2304      	movs	r3, #4
 80028fe:	e006      	b.n	800290e <HAL_GPIO_Init+0x1fa>
 8002900:	2303      	movs	r3, #3
 8002902:	e004      	b.n	800290e <HAL_GPIO_Init+0x1fa>
 8002904:	2302      	movs	r3, #2
 8002906:	e002      	b.n	800290e <HAL_GPIO_Init+0x1fa>
 8002908:	2301      	movs	r3, #1
 800290a:	e000      	b.n	800290e <HAL_GPIO_Init+0x1fa>
 800290c:	2300      	movs	r3, #0
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	f002 0203 	and.w	r2, r2, #3
 8002914:	0092      	lsls	r2, r2, #2
 8002916:	4093      	lsls	r3, r2
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	4313      	orrs	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800291e:	4937      	ldr	r1, [pc, #220]	@ (80029fc <HAL_GPIO_Init+0x2e8>)
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	089b      	lsrs	r3, r3, #2
 8002924:	3302      	adds	r3, #2
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800292c:	4b39      	ldr	r3, [pc, #228]	@ (8002a14 <HAL_GPIO_Init+0x300>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	43db      	mvns	r3, r3
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4013      	ands	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002950:	4a30      	ldr	r2, [pc, #192]	@ (8002a14 <HAL_GPIO_Init+0x300>)
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002956:	4b2f      	ldr	r3, [pc, #188]	@ (8002a14 <HAL_GPIO_Init+0x300>)
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	43db      	mvns	r3, r3
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	4013      	ands	r3, r2
 8002964:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4313      	orrs	r3, r2
 8002978:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800297a:	4a26      	ldr	r2, [pc, #152]	@ (8002a14 <HAL_GPIO_Init+0x300>)
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002980:	4b24      	ldr	r3, [pc, #144]	@ (8002a14 <HAL_GPIO_Init+0x300>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	43db      	mvns	r3, r3
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	4013      	ands	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002a14 <HAL_GPIO_Init+0x300>)
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80029aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002a14 <HAL_GPIO_Init+0x300>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	43db      	mvns	r3, r3
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	4013      	ands	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80029ce:	4a11      	ldr	r2, [pc, #68]	@ (8002a14 <HAL_GPIO_Init+0x300>)
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	3301      	adds	r3, #1
 80029d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	fa22 f303 	lsr.w	r3, r2, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f47f ae9d 	bne.w	8002724 <HAL_GPIO_Init+0x10>
  }
}
 80029ea:	bf00      	nop
 80029ec:	bf00      	nop
 80029ee:	371c      	adds	r7, #28
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	40021000 	.word	0x40021000
 80029fc:	40010000 	.word	0x40010000
 8002a00:	48000400 	.word	0x48000400
 8002a04:	48000800 	.word	0x48000800
 8002a08:	48000c00 	.word	0x48000c00
 8002a0c:	48001000 	.word	0x48001000
 8002a10:	48001400 	.word	0x48001400
 8002a14:	40010400 	.word	0x40010400

08002a18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	460b      	mov	r3, r1
 8002a22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	887b      	ldrh	r3, [r7, #2]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d002      	beq.n	8002a36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a30:	2301      	movs	r3, #1
 8002a32:	73fb      	strb	r3, [r7, #15]
 8002a34:	e001      	b.n	8002a3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a36:	2300      	movs	r3, #0
 8002a38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	460b      	mov	r3, r1
 8002a52:	807b      	strh	r3, [r7, #2]
 8002a54:	4613      	mov	r3, r2
 8002a56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a58:	787b      	ldrb	r3, [r7, #1]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a5e:	887a      	ldrh	r2, [r7, #2]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a64:	e002      	b.n	8002a6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a66:	887a      	ldrh	r2, [r7, #2]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d141      	bne.n	8002b0a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a86:	4b4b      	ldr	r3, [pc, #300]	@ (8002bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a92:	d131      	bne.n	8002af8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a94:	4b47      	ldr	r3, [pc, #284]	@ (8002bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a9a:	4a46      	ldr	r2, [pc, #280]	@ (8002bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002aa0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002aa4:	4b43      	ldr	r3, [pc, #268]	@ (8002bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002aac:	4a41      	ldr	r2, [pc, #260]	@ (8002bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ab2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ab4:	4b40      	ldr	r3, [pc, #256]	@ (8002bb8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2232      	movs	r2, #50	@ 0x32
 8002aba:	fb02 f303 	mul.w	r3, r2, r3
 8002abe:	4a3f      	ldr	r2, [pc, #252]	@ (8002bbc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac4:	0c9b      	lsrs	r3, r3, #18
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aca:	e002      	b.n	8002ad2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ad2:	4b38      	ldr	r3, [pc, #224]	@ (8002bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ada:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ade:	d102      	bne.n	8002ae6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f2      	bne.n	8002acc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ae6:	4b33      	ldr	r3, [pc, #204]	@ (8002bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002af2:	d158      	bne.n	8002ba6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e057      	b.n	8002ba8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002af8:	4b2e      	ldr	r3, [pc, #184]	@ (8002bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002afe:	4a2d      	ldr	r2, [pc, #180]	@ (8002bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b04:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002b08:	e04d      	b.n	8002ba6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b10:	d141      	bne.n	8002b96 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b12:	4b28      	ldr	r3, [pc, #160]	@ (8002bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b1e:	d131      	bne.n	8002b84 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b20:	4b24      	ldr	r3, [pc, #144]	@ (8002bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b26:	4a23      	ldr	r2, [pc, #140]	@ (8002bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b30:	4b20      	ldr	r3, [pc, #128]	@ (8002bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b38:	4a1e      	ldr	r2, [pc, #120]	@ (8002bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b40:	4b1d      	ldr	r3, [pc, #116]	@ (8002bb8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2232      	movs	r2, #50	@ 0x32
 8002b46:	fb02 f303 	mul.w	r3, r2, r3
 8002b4a:	4a1c      	ldr	r2, [pc, #112]	@ (8002bbc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b50:	0c9b      	lsrs	r3, r3, #18
 8002b52:	3301      	adds	r3, #1
 8002b54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b56:	e002      	b.n	8002b5e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b5e:	4b15      	ldr	r3, [pc, #84]	@ (8002bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b6a:	d102      	bne.n	8002b72 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f2      	bne.n	8002b58 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b72:	4b10      	ldr	r3, [pc, #64]	@ (8002bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b7e:	d112      	bne.n	8002ba6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e011      	b.n	8002ba8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b84:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b90:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002b94:	e007      	b.n	8002ba6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b96:	4b07      	ldr	r3, [pc, #28]	@ (8002bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b9e:	4a05      	ldr	r2, [pc, #20]	@ (8002bb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ba0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ba4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	40007000 	.word	0x40007000
 8002bb8:	20000000 	.word	0x20000000
 8002bbc:	431bde83 	.word	0x431bde83

08002bc0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002bc4:	4b05      	ldr	r3, [pc, #20]	@ (8002bdc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	4a04      	ldr	r2, [pc, #16]	@ (8002bdc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002bca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bce:	6093      	str	r3, [r2, #8]
}
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40007000 	.word	0x40007000

08002be0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b088      	sub	sp, #32
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e2fe      	b.n	80031f0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d075      	beq.n	8002cea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bfe:	4b97      	ldr	r3, [pc, #604]	@ (8002e5c <HAL_RCC_OscConfig+0x27c>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 030c 	and.w	r3, r3, #12
 8002c06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c08:	4b94      	ldr	r3, [pc, #592]	@ (8002e5c <HAL_RCC_OscConfig+0x27c>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f003 0303 	and.w	r3, r3, #3
 8002c10:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	2b0c      	cmp	r3, #12
 8002c16:	d102      	bne.n	8002c1e <HAL_RCC_OscConfig+0x3e>
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d002      	beq.n	8002c24 <HAL_RCC_OscConfig+0x44>
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d10b      	bne.n	8002c3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c24:	4b8d      	ldr	r3, [pc, #564]	@ (8002e5c <HAL_RCC_OscConfig+0x27c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d05b      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x108>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d157      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e2d9      	b.n	80031f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c44:	d106      	bne.n	8002c54 <HAL_RCC_OscConfig+0x74>
 8002c46:	4b85      	ldr	r3, [pc, #532]	@ (8002e5c <HAL_RCC_OscConfig+0x27c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a84      	ldr	r2, [pc, #528]	@ (8002e5c <HAL_RCC_OscConfig+0x27c>)
 8002c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	e01d      	b.n	8002c90 <HAL_RCC_OscConfig+0xb0>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c5c:	d10c      	bne.n	8002c78 <HAL_RCC_OscConfig+0x98>
 8002c5e:	4b7f      	ldr	r3, [pc, #508]	@ (8002e5c <HAL_RCC_OscConfig+0x27c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a7e      	ldr	r2, [pc, #504]	@ (8002e5c <HAL_RCC_OscConfig+0x27c>)
 8002c64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	4b7c      	ldr	r3, [pc, #496]	@ (8002e5c <HAL_RCC_OscConfig+0x27c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a7b      	ldr	r2, [pc, #492]	@ (8002e5c <HAL_RCC_OscConfig+0x27c>)
 8002c70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	e00b      	b.n	8002c90 <HAL_RCC_OscConfig+0xb0>
 8002c78:	4b78      	ldr	r3, [pc, #480]	@ (8002e5c <HAL_RCC_OscConfig+0x27c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a77      	ldr	r2, [pc, #476]	@ (8002e5c <HAL_RCC_OscConfig+0x27c>)
 8002c7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	4b75      	ldr	r3, [pc, #468]	@ (8002e5c <HAL_RCC_OscConfig+0x27c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a74      	ldr	r2, [pc, #464]	@ (8002e5c <HAL_RCC_OscConfig+0x27c>)
 8002c8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d013      	beq.n	8002cc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c98:	f7ff fc2a 	bl	80024f0 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca0:	f7ff fc26 	bl	80024f0 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b64      	cmp	r3, #100	@ 0x64
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e29e      	b.n	80031f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cb2:	4b6a      	ldr	r3, [pc, #424]	@ (8002e5c <HAL_RCC_OscConfig+0x27c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCC_OscConfig+0xc0>
 8002cbe:	e014      	b.n	8002cea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc0:	f7ff fc16 	bl	80024f0 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc8:	f7ff fc12 	bl	80024f0 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	@ 0x64
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e28a      	b.n	80031f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cda:	4b60      	ldr	r3, [pc, #384]	@ (8002e5c <HAL_RCC_OscConfig+0x27c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0xe8>
 8002ce6:	e000      	b.n	8002cea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d075      	beq.n	8002de2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cf6:	4b59      	ldr	r3, [pc, #356]	@ (8002e5c <HAL_RCC_OscConfig+0x27c>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d00:	4b56      	ldr	r3, [pc, #344]	@ (8002e5c <HAL_RCC_OscConfig+0x27c>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	2b0c      	cmp	r3, #12
 8002d0e:	d102      	bne.n	8002d16 <HAL_RCC_OscConfig+0x136>
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d002      	beq.n	8002d1c <HAL_RCC_OscConfig+0x13c>
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d11f      	bne.n	8002d5c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d1c:	4b4f      	ldr	r3, [pc, #316]	@ (8002e5c <HAL_RCC_OscConfig+0x27c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d005      	beq.n	8002d34 <HAL_RCC_OscConfig+0x154>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e25d      	b.n	80031f0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d34:	4b49      	ldr	r3, [pc, #292]	@ (8002e5c <HAL_RCC_OscConfig+0x27c>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	061b      	lsls	r3, r3, #24
 8002d42:	4946      	ldr	r1, [pc, #280]	@ (8002e5c <HAL_RCC_OscConfig+0x27c>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002d48:	4b45      	ldr	r3, [pc, #276]	@ (8002e60 <HAL_RCC_OscConfig+0x280>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff fb83 	bl	8002458 <HAL_InitTick>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d043      	beq.n	8002de0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e249      	b.n	80031f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d023      	beq.n	8002dac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d64:	4b3d      	ldr	r3, [pc, #244]	@ (8002e5c <HAL_RCC_OscConfig+0x27c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a3c      	ldr	r2, [pc, #240]	@ (8002e5c <HAL_RCC_OscConfig+0x27c>)
 8002d6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d70:	f7ff fbbe 	bl	80024f0 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d78:	f7ff fbba 	bl	80024f0 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e232      	b.n	80031f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d8a:	4b34      	ldr	r3, [pc, #208]	@ (8002e5c <HAL_RCC_OscConfig+0x27c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0f0      	beq.n	8002d78 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d96:	4b31      	ldr	r3, [pc, #196]	@ (8002e5c <HAL_RCC_OscConfig+0x27c>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	061b      	lsls	r3, r3, #24
 8002da4:	492d      	ldr	r1, [pc, #180]	@ (8002e5c <HAL_RCC_OscConfig+0x27c>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	604b      	str	r3, [r1, #4]
 8002daa:	e01a      	b.n	8002de2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dac:	4b2b      	ldr	r3, [pc, #172]	@ (8002e5c <HAL_RCC_OscConfig+0x27c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a2a      	ldr	r2, [pc, #168]	@ (8002e5c <HAL_RCC_OscConfig+0x27c>)
 8002db2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db8:	f7ff fb9a 	bl	80024f0 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dc0:	f7ff fb96 	bl	80024f0 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e20e      	b.n	80031f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dd2:	4b22      	ldr	r3, [pc, #136]	@ (8002e5c <HAL_RCC_OscConfig+0x27c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f0      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x1e0>
 8002dde:	e000      	b.n	8002de2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002de0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d041      	beq.n	8002e72 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d01c      	beq.n	8002e30 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002df6:	4b19      	ldr	r3, [pc, #100]	@ (8002e5c <HAL_RCC_OscConfig+0x27c>)
 8002df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dfc:	4a17      	ldr	r2, [pc, #92]	@ (8002e5c <HAL_RCC_OscConfig+0x27c>)
 8002dfe:	f043 0301 	orr.w	r3, r3, #1
 8002e02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e06:	f7ff fb73 	bl	80024f0 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e0e:	f7ff fb6f 	bl	80024f0 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e1e7      	b.n	80031f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e20:	4b0e      	ldr	r3, [pc, #56]	@ (8002e5c <HAL_RCC_OscConfig+0x27c>)
 8002e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0ef      	beq.n	8002e0e <HAL_RCC_OscConfig+0x22e>
 8002e2e:	e020      	b.n	8002e72 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e30:	4b0a      	ldr	r3, [pc, #40]	@ (8002e5c <HAL_RCC_OscConfig+0x27c>)
 8002e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e36:	4a09      	ldr	r2, [pc, #36]	@ (8002e5c <HAL_RCC_OscConfig+0x27c>)
 8002e38:	f023 0301 	bic.w	r3, r3, #1
 8002e3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e40:	f7ff fb56 	bl	80024f0 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e46:	e00d      	b.n	8002e64 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e48:	f7ff fb52 	bl	80024f0 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d906      	bls.n	8002e64 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e1ca      	b.n	80031f0 <HAL_RCC_OscConfig+0x610>
 8002e5a:	bf00      	nop
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e64:	4b8c      	ldr	r3, [pc, #560]	@ (8003098 <HAL_RCC_OscConfig+0x4b8>)
 8002e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1ea      	bne.n	8002e48 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0304 	and.w	r3, r3, #4
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 80a6 	beq.w	8002fcc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e80:	2300      	movs	r3, #0
 8002e82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e84:	4b84      	ldr	r3, [pc, #528]	@ (8003098 <HAL_RCC_OscConfig+0x4b8>)
 8002e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <HAL_RCC_OscConfig+0x2b4>
 8002e90:	2301      	movs	r3, #1
 8002e92:	e000      	b.n	8002e96 <HAL_RCC_OscConfig+0x2b6>
 8002e94:	2300      	movs	r3, #0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00d      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e9a:	4b7f      	ldr	r3, [pc, #508]	@ (8003098 <HAL_RCC_OscConfig+0x4b8>)
 8002e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e9e:	4a7e      	ldr	r2, [pc, #504]	@ (8003098 <HAL_RCC_OscConfig+0x4b8>)
 8002ea0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ea4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ea6:	4b7c      	ldr	r3, [pc, #496]	@ (8003098 <HAL_RCC_OscConfig+0x4b8>)
 8002ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eb6:	4b79      	ldr	r3, [pc, #484]	@ (800309c <HAL_RCC_OscConfig+0x4bc>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d118      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ec2:	4b76      	ldr	r3, [pc, #472]	@ (800309c <HAL_RCC_OscConfig+0x4bc>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a75      	ldr	r2, [pc, #468]	@ (800309c <HAL_RCC_OscConfig+0x4bc>)
 8002ec8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ecc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ece:	f7ff fb0f 	bl	80024f0 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed6:	f7ff fb0b 	bl	80024f0 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e183      	b.n	80031f0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ee8:	4b6c      	ldr	r3, [pc, #432]	@ (800309c <HAL_RCC_OscConfig+0x4bc>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f0      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d108      	bne.n	8002f0e <HAL_RCC_OscConfig+0x32e>
 8002efc:	4b66      	ldr	r3, [pc, #408]	@ (8003098 <HAL_RCC_OscConfig+0x4b8>)
 8002efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f02:	4a65      	ldr	r2, [pc, #404]	@ (8003098 <HAL_RCC_OscConfig+0x4b8>)
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f0c:	e024      	b.n	8002f58 <HAL_RCC_OscConfig+0x378>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	2b05      	cmp	r3, #5
 8002f14:	d110      	bne.n	8002f38 <HAL_RCC_OscConfig+0x358>
 8002f16:	4b60      	ldr	r3, [pc, #384]	@ (8003098 <HAL_RCC_OscConfig+0x4b8>)
 8002f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f1c:	4a5e      	ldr	r2, [pc, #376]	@ (8003098 <HAL_RCC_OscConfig+0x4b8>)
 8002f1e:	f043 0304 	orr.w	r3, r3, #4
 8002f22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f26:	4b5c      	ldr	r3, [pc, #368]	@ (8003098 <HAL_RCC_OscConfig+0x4b8>)
 8002f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f2c:	4a5a      	ldr	r2, [pc, #360]	@ (8003098 <HAL_RCC_OscConfig+0x4b8>)
 8002f2e:	f043 0301 	orr.w	r3, r3, #1
 8002f32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f36:	e00f      	b.n	8002f58 <HAL_RCC_OscConfig+0x378>
 8002f38:	4b57      	ldr	r3, [pc, #348]	@ (8003098 <HAL_RCC_OscConfig+0x4b8>)
 8002f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f3e:	4a56      	ldr	r2, [pc, #344]	@ (8003098 <HAL_RCC_OscConfig+0x4b8>)
 8002f40:	f023 0301 	bic.w	r3, r3, #1
 8002f44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f48:	4b53      	ldr	r3, [pc, #332]	@ (8003098 <HAL_RCC_OscConfig+0x4b8>)
 8002f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f4e:	4a52      	ldr	r2, [pc, #328]	@ (8003098 <HAL_RCC_OscConfig+0x4b8>)
 8002f50:	f023 0304 	bic.w	r3, r3, #4
 8002f54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d016      	beq.n	8002f8e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f60:	f7ff fac6 	bl	80024f0 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f66:	e00a      	b.n	8002f7e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f68:	f7ff fac2 	bl	80024f0 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e138      	b.n	80031f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f7e:	4b46      	ldr	r3, [pc, #280]	@ (8003098 <HAL_RCC_OscConfig+0x4b8>)
 8002f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0ed      	beq.n	8002f68 <HAL_RCC_OscConfig+0x388>
 8002f8c:	e015      	b.n	8002fba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8e:	f7ff faaf 	bl	80024f0 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f94:	e00a      	b.n	8002fac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f96:	f7ff faab 	bl	80024f0 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e121      	b.n	80031f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fac:	4b3a      	ldr	r3, [pc, #232]	@ (8003098 <HAL_RCC_OscConfig+0x4b8>)
 8002fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1ed      	bne.n	8002f96 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fba:	7ffb      	ldrb	r3, [r7, #31]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d105      	bne.n	8002fcc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fc0:	4b35      	ldr	r3, [pc, #212]	@ (8003098 <HAL_RCC_OscConfig+0x4b8>)
 8002fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc4:	4a34      	ldr	r2, [pc, #208]	@ (8003098 <HAL_RCC_OscConfig+0x4b8>)
 8002fc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fca:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0320 	and.w	r3, r3, #32
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d03c      	beq.n	8003052 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d01c      	beq.n	800301a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fe0:	4b2d      	ldr	r3, [pc, #180]	@ (8003098 <HAL_RCC_OscConfig+0x4b8>)
 8002fe2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fe6:	4a2c      	ldr	r2, [pc, #176]	@ (8003098 <HAL_RCC_OscConfig+0x4b8>)
 8002fe8:	f043 0301 	orr.w	r3, r3, #1
 8002fec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff0:	f7ff fa7e 	bl	80024f0 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ff8:	f7ff fa7a 	bl	80024f0 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e0f2      	b.n	80031f0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800300a:	4b23      	ldr	r3, [pc, #140]	@ (8003098 <HAL_RCC_OscConfig+0x4b8>)
 800300c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0ef      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x418>
 8003018:	e01b      	b.n	8003052 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800301a:	4b1f      	ldr	r3, [pc, #124]	@ (8003098 <HAL_RCC_OscConfig+0x4b8>)
 800301c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003020:	4a1d      	ldr	r2, [pc, #116]	@ (8003098 <HAL_RCC_OscConfig+0x4b8>)
 8003022:	f023 0301 	bic.w	r3, r3, #1
 8003026:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800302a:	f7ff fa61 	bl	80024f0 <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003032:	f7ff fa5d 	bl	80024f0 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e0d5      	b.n	80031f0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003044:	4b14      	ldr	r3, [pc, #80]	@ (8003098 <HAL_RCC_OscConfig+0x4b8>)
 8003046:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1ef      	bne.n	8003032 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 80c9 	beq.w	80031ee <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800305c:	4b0e      	ldr	r3, [pc, #56]	@ (8003098 <HAL_RCC_OscConfig+0x4b8>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 030c 	and.w	r3, r3, #12
 8003064:	2b0c      	cmp	r3, #12
 8003066:	f000 8083 	beq.w	8003170 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	2b02      	cmp	r3, #2
 8003070:	d15e      	bne.n	8003130 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003072:	4b09      	ldr	r3, [pc, #36]	@ (8003098 <HAL_RCC_OscConfig+0x4b8>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a08      	ldr	r2, [pc, #32]	@ (8003098 <HAL_RCC_OscConfig+0x4b8>)
 8003078:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800307c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307e:	f7ff fa37 	bl	80024f0 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003084:	e00c      	b.n	80030a0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003086:	f7ff fa33 	bl	80024f0 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d905      	bls.n	80030a0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e0ab      	b.n	80031f0 <HAL_RCC_OscConfig+0x610>
 8003098:	40021000 	.word	0x40021000
 800309c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030a0:	4b55      	ldr	r3, [pc, #340]	@ (80031f8 <HAL_RCC_OscConfig+0x618>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1ec      	bne.n	8003086 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030ac:	4b52      	ldr	r3, [pc, #328]	@ (80031f8 <HAL_RCC_OscConfig+0x618>)
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	4b52      	ldr	r3, [pc, #328]	@ (80031fc <HAL_RCC_OscConfig+0x61c>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6a11      	ldr	r1, [r2, #32]
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030bc:	3a01      	subs	r2, #1
 80030be:	0112      	lsls	r2, r2, #4
 80030c0:	4311      	orrs	r1, r2
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80030c6:	0212      	lsls	r2, r2, #8
 80030c8:	4311      	orrs	r1, r2
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80030ce:	0852      	lsrs	r2, r2, #1
 80030d0:	3a01      	subs	r2, #1
 80030d2:	0552      	lsls	r2, r2, #21
 80030d4:	4311      	orrs	r1, r2
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80030da:	0852      	lsrs	r2, r2, #1
 80030dc:	3a01      	subs	r2, #1
 80030de:	0652      	lsls	r2, r2, #25
 80030e0:	4311      	orrs	r1, r2
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80030e6:	06d2      	lsls	r2, r2, #27
 80030e8:	430a      	orrs	r2, r1
 80030ea:	4943      	ldr	r1, [pc, #268]	@ (80031f8 <HAL_RCC_OscConfig+0x618>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030f0:	4b41      	ldr	r3, [pc, #260]	@ (80031f8 <HAL_RCC_OscConfig+0x618>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a40      	ldr	r2, [pc, #256]	@ (80031f8 <HAL_RCC_OscConfig+0x618>)
 80030f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030fa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030fc:	4b3e      	ldr	r3, [pc, #248]	@ (80031f8 <HAL_RCC_OscConfig+0x618>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	4a3d      	ldr	r2, [pc, #244]	@ (80031f8 <HAL_RCC_OscConfig+0x618>)
 8003102:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003106:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003108:	f7ff f9f2 	bl	80024f0 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003110:	f7ff f9ee 	bl	80024f0 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e066      	b.n	80031f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003122:	4b35      	ldr	r3, [pc, #212]	@ (80031f8 <HAL_RCC_OscConfig+0x618>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0x530>
 800312e:	e05e      	b.n	80031ee <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003130:	4b31      	ldr	r3, [pc, #196]	@ (80031f8 <HAL_RCC_OscConfig+0x618>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a30      	ldr	r2, [pc, #192]	@ (80031f8 <HAL_RCC_OscConfig+0x618>)
 8003136:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800313a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313c:	f7ff f9d8 	bl	80024f0 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003144:	f7ff f9d4 	bl	80024f0 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e04c      	b.n	80031f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003156:	4b28      	ldr	r3, [pc, #160]	@ (80031f8 <HAL_RCC_OscConfig+0x618>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f0      	bne.n	8003144 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003162:	4b25      	ldr	r3, [pc, #148]	@ (80031f8 <HAL_RCC_OscConfig+0x618>)
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	4924      	ldr	r1, [pc, #144]	@ (80031f8 <HAL_RCC_OscConfig+0x618>)
 8003168:	4b25      	ldr	r3, [pc, #148]	@ (8003200 <HAL_RCC_OscConfig+0x620>)
 800316a:	4013      	ands	r3, r2
 800316c:	60cb      	str	r3, [r1, #12]
 800316e:	e03e      	b.n	80031ee <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e039      	b.n	80031f0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800317c:	4b1e      	ldr	r3, [pc, #120]	@ (80031f8 <HAL_RCC_OscConfig+0x618>)
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f003 0203 	and.w	r2, r3, #3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	429a      	cmp	r2, r3
 800318e:	d12c      	bne.n	80031ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319a:	3b01      	subs	r3, #1
 800319c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800319e:	429a      	cmp	r2, r3
 80031a0:	d123      	bne.n	80031ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d11b      	bne.n	80031ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031bc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80031be:	429a      	cmp	r2, r3
 80031c0:	d113      	bne.n	80031ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031cc:	085b      	lsrs	r3, r3, #1
 80031ce:	3b01      	subs	r3, #1
 80031d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d109      	bne.n	80031ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031e0:	085b      	lsrs	r3, r3, #1
 80031e2:	3b01      	subs	r3, #1
 80031e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d001      	beq.n	80031ee <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e000      	b.n	80031f0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3720      	adds	r7, #32
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40021000 	.word	0x40021000
 80031fc:	019f800c 	.word	0x019f800c
 8003200:	feeefffc 	.word	0xfeeefffc

08003204 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800320e:	2300      	movs	r3, #0
 8003210:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e11e      	b.n	800345a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800321c:	4b91      	ldr	r3, [pc, #580]	@ (8003464 <HAL_RCC_ClockConfig+0x260>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 030f 	and.w	r3, r3, #15
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d910      	bls.n	800324c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322a:	4b8e      	ldr	r3, [pc, #568]	@ (8003464 <HAL_RCC_ClockConfig+0x260>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f023 020f 	bic.w	r2, r3, #15
 8003232:	498c      	ldr	r1, [pc, #560]	@ (8003464 <HAL_RCC_ClockConfig+0x260>)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	4313      	orrs	r3, r2
 8003238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800323a:	4b8a      	ldr	r3, [pc, #552]	@ (8003464 <HAL_RCC_ClockConfig+0x260>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d001      	beq.n	800324c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e106      	b.n	800345a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	d073      	beq.n	8003340 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b03      	cmp	r3, #3
 800325e:	d129      	bne.n	80032b4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003260:	4b81      	ldr	r3, [pc, #516]	@ (8003468 <HAL_RCC_ClockConfig+0x264>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e0f4      	b.n	800345a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003270:	f000 f966 	bl	8003540 <RCC_GetSysClockFreqFromPLLSource>
 8003274:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4a7c      	ldr	r2, [pc, #496]	@ (800346c <HAL_RCC_ClockConfig+0x268>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d93f      	bls.n	80032fe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800327e:	4b7a      	ldr	r3, [pc, #488]	@ (8003468 <HAL_RCC_ClockConfig+0x264>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d009      	beq.n	800329e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003292:	2b00      	cmp	r3, #0
 8003294:	d033      	beq.n	80032fe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800329a:	2b00      	cmp	r3, #0
 800329c:	d12f      	bne.n	80032fe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800329e:	4b72      	ldr	r3, [pc, #456]	@ (8003468 <HAL_RCC_ClockConfig+0x264>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032a6:	4a70      	ldr	r2, [pc, #448]	@ (8003468 <HAL_RCC_ClockConfig+0x264>)
 80032a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80032ae:	2380      	movs	r3, #128	@ 0x80
 80032b0:	617b      	str	r3, [r7, #20]
 80032b2:	e024      	b.n	80032fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d107      	bne.n	80032cc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032bc:	4b6a      	ldr	r3, [pc, #424]	@ (8003468 <HAL_RCC_ClockConfig+0x264>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d109      	bne.n	80032dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e0c6      	b.n	800345a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032cc:	4b66      	ldr	r3, [pc, #408]	@ (8003468 <HAL_RCC_ClockConfig+0x264>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e0be      	b.n	800345a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80032dc:	f000 f8ce 	bl	800347c <HAL_RCC_GetSysClockFreq>
 80032e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	4a61      	ldr	r2, [pc, #388]	@ (800346c <HAL_RCC_ClockConfig+0x268>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d909      	bls.n	80032fe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80032ea:	4b5f      	ldr	r3, [pc, #380]	@ (8003468 <HAL_RCC_ClockConfig+0x264>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032f2:	4a5d      	ldr	r2, [pc, #372]	@ (8003468 <HAL_RCC_ClockConfig+0x264>)
 80032f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80032fa:	2380      	movs	r3, #128	@ 0x80
 80032fc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032fe:	4b5a      	ldr	r3, [pc, #360]	@ (8003468 <HAL_RCC_ClockConfig+0x264>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f023 0203 	bic.w	r2, r3, #3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	4957      	ldr	r1, [pc, #348]	@ (8003468 <HAL_RCC_ClockConfig+0x264>)
 800330c:	4313      	orrs	r3, r2
 800330e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003310:	f7ff f8ee 	bl	80024f0 <HAL_GetTick>
 8003314:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003316:	e00a      	b.n	800332e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003318:	f7ff f8ea 	bl	80024f0 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003326:	4293      	cmp	r3, r2
 8003328:	d901      	bls.n	800332e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e095      	b.n	800345a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800332e:	4b4e      	ldr	r3, [pc, #312]	@ (8003468 <HAL_RCC_ClockConfig+0x264>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 020c 	and.w	r2, r3, #12
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	429a      	cmp	r2, r3
 800333e:	d1eb      	bne.n	8003318 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d023      	beq.n	8003394 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	2b00      	cmp	r3, #0
 8003356:	d005      	beq.n	8003364 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003358:	4b43      	ldr	r3, [pc, #268]	@ (8003468 <HAL_RCC_ClockConfig+0x264>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	4a42      	ldr	r2, [pc, #264]	@ (8003468 <HAL_RCC_ClockConfig+0x264>)
 800335e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003362:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0308 	and.w	r3, r3, #8
 800336c:	2b00      	cmp	r3, #0
 800336e:	d007      	beq.n	8003380 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003370:	4b3d      	ldr	r3, [pc, #244]	@ (8003468 <HAL_RCC_ClockConfig+0x264>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003378:	4a3b      	ldr	r2, [pc, #236]	@ (8003468 <HAL_RCC_ClockConfig+0x264>)
 800337a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800337e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003380:	4b39      	ldr	r3, [pc, #228]	@ (8003468 <HAL_RCC_ClockConfig+0x264>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	4936      	ldr	r1, [pc, #216]	@ (8003468 <HAL_RCC_ClockConfig+0x264>)
 800338e:	4313      	orrs	r3, r2
 8003390:	608b      	str	r3, [r1, #8]
 8003392:	e008      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	2b80      	cmp	r3, #128	@ 0x80
 8003398:	d105      	bne.n	80033a6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800339a:	4b33      	ldr	r3, [pc, #204]	@ (8003468 <HAL_RCC_ClockConfig+0x264>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	4a32      	ldr	r2, [pc, #200]	@ (8003468 <HAL_RCC_ClockConfig+0x264>)
 80033a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033a4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033a6:	4b2f      	ldr	r3, [pc, #188]	@ (8003464 <HAL_RCC_ClockConfig+0x260>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d21d      	bcs.n	80033f0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b4:	4b2b      	ldr	r3, [pc, #172]	@ (8003464 <HAL_RCC_ClockConfig+0x260>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f023 020f 	bic.w	r2, r3, #15
 80033bc:	4929      	ldr	r1, [pc, #164]	@ (8003464 <HAL_RCC_ClockConfig+0x260>)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80033c4:	f7ff f894 	bl	80024f0 <HAL_GetTick>
 80033c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ca:	e00a      	b.n	80033e2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033cc:	f7ff f890 	bl	80024f0 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033da:	4293      	cmp	r3, r2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e03b      	b.n	800345a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e2:	4b20      	ldr	r3, [pc, #128]	@ (8003464 <HAL_RCC_ClockConfig+0x260>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d1ed      	bne.n	80033cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d008      	beq.n	800340e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003468 <HAL_RCC_ClockConfig+0x264>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	4917      	ldr	r1, [pc, #92]	@ (8003468 <HAL_RCC_ClockConfig+0x264>)
 800340a:	4313      	orrs	r3, r2
 800340c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b00      	cmp	r3, #0
 8003418:	d009      	beq.n	800342e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800341a:	4b13      	ldr	r3, [pc, #76]	@ (8003468 <HAL_RCC_ClockConfig+0x264>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	490f      	ldr	r1, [pc, #60]	@ (8003468 <HAL_RCC_ClockConfig+0x264>)
 800342a:	4313      	orrs	r3, r2
 800342c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800342e:	f000 f825 	bl	800347c <HAL_RCC_GetSysClockFreq>
 8003432:	4602      	mov	r2, r0
 8003434:	4b0c      	ldr	r3, [pc, #48]	@ (8003468 <HAL_RCC_ClockConfig+0x264>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	091b      	lsrs	r3, r3, #4
 800343a:	f003 030f 	and.w	r3, r3, #15
 800343e:	490c      	ldr	r1, [pc, #48]	@ (8003470 <HAL_RCC_ClockConfig+0x26c>)
 8003440:	5ccb      	ldrb	r3, [r1, r3]
 8003442:	f003 031f 	and.w	r3, r3, #31
 8003446:	fa22 f303 	lsr.w	r3, r2, r3
 800344a:	4a0a      	ldr	r2, [pc, #40]	@ (8003474 <HAL_RCC_ClockConfig+0x270>)
 800344c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800344e:	4b0a      	ldr	r3, [pc, #40]	@ (8003478 <HAL_RCC_ClockConfig+0x274>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff f800 	bl	8002458 <HAL_InitTick>
 8003458:	4603      	mov	r3, r0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40022000 	.word	0x40022000
 8003468:	40021000 	.word	0x40021000
 800346c:	04c4b400 	.word	0x04c4b400
 8003470:	080039b8 	.word	0x080039b8
 8003474:	20000000 	.word	0x20000000
 8003478:	20000004 	.word	0x20000004

0800347c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800347c:	b480      	push	{r7}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003482:	4b2c      	ldr	r3, [pc, #176]	@ (8003534 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 030c 	and.w	r3, r3, #12
 800348a:	2b04      	cmp	r3, #4
 800348c:	d102      	bne.n	8003494 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800348e:	4b2a      	ldr	r3, [pc, #168]	@ (8003538 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003490:	613b      	str	r3, [r7, #16]
 8003492:	e047      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003494:	4b27      	ldr	r3, [pc, #156]	@ (8003534 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 030c 	and.w	r3, r3, #12
 800349c:	2b08      	cmp	r3, #8
 800349e:	d102      	bne.n	80034a6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034a0:	4b26      	ldr	r3, [pc, #152]	@ (800353c <HAL_RCC_GetSysClockFreq+0xc0>)
 80034a2:	613b      	str	r3, [r7, #16]
 80034a4:	e03e      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80034a6:	4b23      	ldr	r3, [pc, #140]	@ (8003534 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 030c 	and.w	r3, r3, #12
 80034ae:	2b0c      	cmp	r3, #12
 80034b0:	d136      	bne.n	8003520 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034b2:	4b20      	ldr	r3, [pc, #128]	@ (8003534 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003534 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	091b      	lsrs	r3, r3, #4
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	3301      	adds	r3, #1
 80034c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2b03      	cmp	r3, #3
 80034ce:	d10c      	bne.n	80034ea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034d0:	4a1a      	ldr	r2, [pc, #104]	@ (800353c <HAL_RCC_GetSysClockFreq+0xc0>)
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d8:	4a16      	ldr	r2, [pc, #88]	@ (8003534 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034da:	68d2      	ldr	r2, [r2, #12]
 80034dc:	0a12      	lsrs	r2, r2, #8
 80034de:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80034e2:	fb02 f303 	mul.w	r3, r2, r3
 80034e6:	617b      	str	r3, [r7, #20]
      break;
 80034e8:	e00c      	b.n	8003504 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034ea:	4a13      	ldr	r2, [pc, #76]	@ (8003538 <HAL_RCC_GetSysClockFreq+0xbc>)
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f2:	4a10      	ldr	r2, [pc, #64]	@ (8003534 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034f4:	68d2      	ldr	r2, [r2, #12]
 80034f6:	0a12      	lsrs	r2, r2, #8
 80034f8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80034fc:	fb02 f303 	mul.w	r3, r2, r3
 8003500:	617b      	str	r3, [r7, #20]
      break;
 8003502:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003504:	4b0b      	ldr	r3, [pc, #44]	@ (8003534 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	0e5b      	lsrs	r3, r3, #25
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	3301      	adds	r3, #1
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	fbb2 f3f3 	udiv	r3, r2, r3
 800351c:	613b      	str	r3, [r7, #16]
 800351e:	e001      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003520:	2300      	movs	r3, #0
 8003522:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003524:	693b      	ldr	r3, [r7, #16]
}
 8003526:	4618      	mov	r0, r3
 8003528:	371c      	adds	r7, #28
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	40021000 	.word	0x40021000
 8003538:	00f42400 	.word	0x00f42400
 800353c:	016e3600 	.word	0x016e3600

08003540 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003540:	b480      	push	{r7}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003546:	4b1e      	ldr	r3, [pc, #120]	@ (80035c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003550:	4b1b      	ldr	r3, [pc, #108]	@ (80035c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	091b      	lsrs	r3, r3, #4
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	3301      	adds	r3, #1
 800355c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	2b03      	cmp	r3, #3
 8003562:	d10c      	bne.n	800357e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003564:	4a17      	ldr	r2, [pc, #92]	@ (80035c4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	fbb2 f3f3 	udiv	r3, r2, r3
 800356c:	4a14      	ldr	r2, [pc, #80]	@ (80035c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800356e:	68d2      	ldr	r2, [r2, #12]
 8003570:	0a12      	lsrs	r2, r2, #8
 8003572:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003576:	fb02 f303 	mul.w	r3, r2, r3
 800357a:	617b      	str	r3, [r7, #20]
    break;
 800357c:	e00c      	b.n	8003598 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800357e:	4a12      	ldr	r2, [pc, #72]	@ (80035c8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	fbb2 f3f3 	udiv	r3, r2, r3
 8003586:	4a0e      	ldr	r2, [pc, #56]	@ (80035c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003588:	68d2      	ldr	r2, [r2, #12]
 800358a:	0a12      	lsrs	r2, r2, #8
 800358c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003590:	fb02 f303 	mul.w	r3, r2, r3
 8003594:	617b      	str	r3, [r7, #20]
    break;
 8003596:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003598:	4b09      	ldr	r3, [pc, #36]	@ (80035c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	0e5b      	lsrs	r3, r3, #25
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	3301      	adds	r3, #1
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80035b2:	687b      	ldr	r3, [r7, #4]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	371c      	adds	r7, #28
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	40021000 	.word	0x40021000
 80035c4:	016e3600 	.word	0x016e3600
 80035c8:	00f42400 	.word	0x00f42400

080035cc <memset>:
 80035cc:	4402      	add	r2, r0
 80035ce:	4603      	mov	r3, r0
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d100      	bne.n	80035d6 <memset+0xa>
 80035d4:	4770      	bx	lr
 80035d6:	f803 1b01 	strb.w	r1, [r3], #1
 80035da:	e7f9      	b.n	80035d0 <memset+0x4>

080035dc <__errno>:
 80035dc:	4b01      	ldr	r3, [pc, #4]	@ (80035e4 <__errno+0x8>)
 80035de:	6818      	ldr	r0, [r3, #0]
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	2000000c 	.word	0x2000000c

080035e8 <__libc_init_array>:
 80035e8:	b570      	push	{r4, r5, r6, lr}
 80035ea:	4d0d      	ldr	r5, [pc, #52]	@ (8003620 <__libc_init_array+0x38>)
 80035ec:	4c0d      	ldr	r4, [pc, #52]	@ (8003624 <__libc_init_array+0x3c>)
 80035ee:	1b64      	subs	r4, r4, r5
 80035f0:	10a4      	asrs	r4, r4, #2
 80035f2:	2600      	movs	r6, #0
 80035f4:	42a6      	cmp	r6, r4
 80035f6:	d109      	bne.n	800360c <__libc_init_array+0x24>
 80035f8:	4d0b      	ldr	r5, [pc, #44]	@ (8003628 <__libc_init_array+0x40>)
 80035fa:	4c0c      	ldr	r4, [pc, #48]	@ (800362c <__libc_init_array+0x44>)
 80035fc:	f000 f9ce 	bl	800399c <_init>
 8003600:	1b64      	subs	r4, r4, r5
 8003602:	10a4      	asrs	r4, r4, #2
 8003604:	2600      	movs	r6, #0
 8003606:	42a6      	cmp	r6, r4
 8003608:	d105      	bne.n	8003616 <__libc_init_array+0x2e>
 800360a:	bd70      	pop	{r4, r5, r6, pc}
 800360c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003610:	4798      	blx	r3
 8003612:	3601      	adds	r6, #1
 8003614:	e7ee      	b.n	80035f4 <__libc_init_array+0xc>
 8003616:	f855 3b04 	ldr.w	r3, [r5], #4
 800361a:	4798      	blx	r3
 800361c:	3601      	adds	r6, #1
 800361e:	e7f2      	b.n	8003606 <__libc_init_array+0x1e>
 8003620:	080039d8 	.word	0x080039d8
 8003624:	080039d8 	.word	0x080039d8
 8003628:	080039d8 	.word	0x080039d8
 800362c:	080039dc 	.word	0x080039dc

08003630 <fmod>:
 8003630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003632:	ed2d 8b02 	vpush	{d8}
 8003636:	ec57 6b10 	vmov	r6, r7, d0
 800363a:	ec55 4b11 	vmov	r4, r5, d1
 800363e:	f000 f8a3 	bl	8003788 <__ieee754_fmod>
 8003642:	4622      	mov	r2, r4
 8003644:	462b      	mov	r3, r5
 8003646:	4630      	mov	r0, r6
 8003648:	4639      	mov	r1, r7
 800364a:	eeb0 8a40 	vmov.f32	s16, s0
 800364e:	eef0 8a60 	vmov.f32	s17, s1
 8003652:	f7fd fa37 	bl	8000ac4 <__aeabi_dcmpun>
 8003656:	b990      	cbnz	r0, 800367e <fmod+0x4e>
 8003658:	2200      	movs	r2, #0
 800365a:	2300      	movs	r3, #0
 800365c:	4620      	mov	r0, r4
 800365e:	4629      	mov	r1, r5
 8003660:	f7fd f9fe 	bl	8000a60 <__aeabi_dcmpeq>
 8003664:	b158      	cbz	r0, 800367e <fmod+0x4e>
 8003666:	f7ff ffb9 	bl	80035dc <__errno>
 800366a:	2321      	movs	r3, #33	@ 0x21
 800366c:	6003      	str	r3, [r0, #0]
 800366e:	2200      	movs	r2, #0
 8003670:	2300      	movs	r3, #0
 8003672:	4610      	mov	r0, r2
 8003674:	4619      	mov	r1, r3
 8003676:	f7fd f8b5 	bl	80007e4 <__aeabi_ddiv>
 800367a:	ec41 0b18 	vmov	d8, r0, r1
 800367e:	eeb0 0a48 	vmov.f32	s0, s16
 8003682:	eef0 0a68 	vmov.f32	s1, s17
 8003686:	ecbd 8b02 	vpop	{d8}
 800368a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800368c:	0000      	movs	r0, r0
	...

08003690 <ceil>:
 8003690:	ec51 0b10 	vmov	r0, r1, d0
 8003694:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800369c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80036a0:	2e13      	cmp	r6, #19
 80036a2:	460c      	mov	r4, r1
 80036a4:	4605      	mov	r5, r0
 80036a6:	4680      	mov	r8, r0
 80036a8:	dc2e      	bgt.n	8003708 <ceil+0x78>
 80036aa:	2e00      	cmp	r6, #0
 80036ac:	da11      	bge.n	80036d2 <ceil+0x42>
 80036ae:	a332      	add	r3, pc, #200	@ (adr r3, 8003778 <ceil+0xe8>)
 80036b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b4:	f7fc fdb6 	bl	8000224 <__adddf3>
 80036b8:	2200      	movs	r2, #0
 80036ba:	2300      	movs	r3, #0
 80036bc:	f7fd f9f8 	bl	8000ab0 <__aeabi_dcmpgt>
 80036c0:	b120      	cbz	r0, 80036cc <ceil+0x3c>
 80036c2:	2c00      	cmp	r4, #0
 80036c4:	db4f      	blt.n	8003766 <ceil+0xd6>
 80036c6:	4325      	orrs	r5, r4
 80036c8:	d151      	bne.n	800376e <ceil+0xde>
 80036ca:	462c      	mov	r4, r5
 80036cc:	4621      	mov	r1, r4
 80036ce:	4628      	mov	r0, r5
 80036d0:	e023      	b.n	800371a <ceil+0x8a>
 80036d2:	4f2b      	ldr	r7, [pc, #172]	@ (8003780 <ceil+0xf0>)
 80036d4:	4137      	asrs	r7, r6
 80036d6:	ea01 0307 	and.w	r3, r1, r7
 80036da:	4303      	orrs	r3, r0
 80036dc:	d01d      	beq.n	800371a <ceil+0x8a>
 80036de:	a326      	add	r3, pc, #152	@ (adr r3, 8003778 <ceil+0xe8>)
 80036e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e4:	f7fc fd9e 	bl	8000224 <__adddf3>
 80036e8:	2200      	movs	r2, #0
 80036ea:	2300      	movs	r3, #0
 80036ec:	f7fd f9e0 	bl	8000ab0 <__aeabi_dcmpgt>
 80036f0:	2800      	cmp	r0, #0
 80036f2:	d0eb      	beq.n	80036cc <ceil+0x3c>
 80036f4:	2c00      	cmp	r4, #0
 80036f6:	bfc2      	ittt	gt
 80036f8:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 80036fc:	4133      	asrgt	r3, r6
 80036fe:	18e4      	addgt	r4, r4, r3
 8003700:	ea24 0407 	bic.w	r4, r4, r7
 8003704:	2500      	movs	r5, #0
 8003706:	e7e1      	b.n	80036cc <ceil+0x3c>
 8003708:	2e33      	cmp	r6, #51	@ 0x33
 800370a:	dd0a      	ble.n	8003722 <ceil+0x92>
 800370c:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8003710:	d103      	bne.n	800371a <ceil+0x8a>
 8003712:	4602      	mov	r2, r0
 8003714:	460b      	mov	r3, r1
 8003716:	f7fc fd85 	bl	8000224 <__adddf3>
 800371a:	ec41 0b10 	vmov	d0, r0, r1
 800371e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003722:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8003726:	f04f 37ff 	mov.w	r7, #4294967295
 800372a:	40df      	lsrs	r7, r3
 800372c:	4238      	tst	r0, r7
 800372e:	d0f4      	beq.n	800371a <ceil+0x8a>
 8003730:	a311      	add	r3, pc, #68	@ (adr r3, 8003778 <ceil+0xe8>)
 8003732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003736:	f7fc fd75 	bl	8000224 <__adddf3>
 800373a:	2200      	movs	r2, #0
 800373c:	2300      	movs	r3, #0
 800373e:	f7fd f9b7 	bl	8000ab0 <__aeabi_dcmpgt>
 8003742:	2800      	cmp	r0, #0
 8003744:	d0c2      	beq.n	80036cc <ceil+0x3c>
 8003746:	2c00      	cmp	r4, #0
 8003748:	dd0a      	ble.n	8003760 <ceil+0xd0>
 800374a:	2e14      	cmp	r6, #20
 800374c:	d101      	bne.n	8003752 <ceil+0xc2>
 800374e:	3401      	adds	r4, #1
 8003750:	e006      	b.n	8003760 <ceil+0xd0>
 8003752:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8003756:	2301      	movs	r3, #1
 8003758:	40b3      	lsls	r3, r6
 800375a:	441d      	add	r5, r3
 800375c:	45a8      	cmp	r8, r5
 800375e:	d8f6      	bhi.n	800374e <ceil+0xbe>
 8003760:	ea25 0507 	bic.w	r5, r5, r7
 8003764:	e7b2      	b.n	80036cc <ceil+0x3c>
 8003766:	2500      	movs	r5, #0
 8003768:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 800376c:	e7ae      	b.n	80036cc <ceil+0x3c>
 800376e:	4c05      	ldr	r4, [pc, #20]	@ (8003784 <ceil+0xf4>)
 8003770:	2500      	movs	r5, #0
 8003772:	e7ab      	b.n	80036cc <ceil+0x3c>
 8003774:	f3af 8000 	nop.w
 8003778:	8800759c 	.word	0x8800759c
 800377c:	7e37e43c 	.word	0x7e37e43c
 8003780:	000fffff 	.word	0x000fffff
 8003784:	3ff00000 	.word	0x3ff00000

08003788 <__ieee754_fmod>:
 8003788:	ec53 2b11 	vmov	r2, r3, d1
 800378c:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 8003790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003794:	ea52 040c 	orrs.w	r4, r2, ip
 8003798:	ec51 0b10 	vmov	r0, r1, d0
 800379c:	461e      	mov	r6, r3
 800379e:	4617      	mov	r7, r2
 80037a0:	4696      	mov	lr, r2
 80037a2:	d00c      	beq.n	80037be <__ieee754_fmod+0x36>
 80037a4:	4c77      	ldr	r4, [pc, #476]	@ (8003984 <__ieee754_fmod+0x1fc>)
 80037a6:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 80037aa:	45a0      	cmp	r8, r4
 80037ac:	4689      	mov	r9, r1
 80037ae:	d806      	bhi.n	80037be <__ieee754_fmod+0x36>
 80037b0:	4254      	negs	r4, r2
 80037b2:	4d75      	ldr	r5, [pc, #468]	@ (8003988 <__ieee754_fmod+0x200>)
 80037b4:	4314      	orrs	r4, r2
 80037b6:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 80037ba:	42ac      	cmp	r4, r5
 80037bc:	d909      	bls.n	80037d2 <__ieee754_fmod+0x4a>
 80037be:	f7fc fee7 	bl	8000590 <__aeabi_dmul>
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	f7fd f80d 	bl	80007e4 <__aeabi_ddiv>
 80037ca:	ec41 0b10 	vmov	d0, r0, r1
 80037ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037d2:	45e0      	cmp	r8, ip
 80037d4:	4682      	mov	sl, r0
 80037d6:	4604      	mov	r4, r0
 80037d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80037dc:	dc09      	bgt.n	80037f2 <__ieee754_fmod+0x6a>
 80037de:	dbf4      	blt.n	80037ca <__ieee754_fmod+0x42>
 80037e0:	4282      	cmp	r2, r0
 80037e2:	d8f2      	bhi.n	80037ca <__ieee754_fmod+0x42>
 80037e4:	d105      	bne.n	80037f2 <__ieee754_fmod+0x6a>
 80037e6:	4b69      	ldr	r3, [pc, #420]	@ (800398c <__ieee754_fmod+0x204>)
 80037e8:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 80037ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037f0:	e7eb      	b.n	80037ca <__ieee754_fmod+0x42>
 80037f2:	4a65      	ldr	r2, [pc, #404]	@ (8003988 <__ieee754_fmod+0x200>)
 80037f4:	ea19 0f02 	tst.w	r9, r2
 80037f8:	d148      	bne.n	800388c <__ieee754_fmod+0x104>
 80037fa:	f1b8 0f00 	cmp.w	r8, #0
 80037fe:	d13d      	bne.n	800387c <__ieee754_fmod+0xf4>
 8003800:	4963      	ldr	r1, [pc, #396]	@ (8003990 <__ieee754_fmod+0x208>)
 8003802:	4653      	mov	r3, sl
 8003804:	2b00      	cmp	r3, #0
 8003806:	dc36      	bgt.n	8003876 <__ieee754_fmod+0xee>
 8003808:	4216      	tst	r6, r2
 800380a:	d14f      	bne.n	80038ac <__ieee754_fmod+0x124>
 800380c:	f1bc 0f00 	cmp.w	ip, #0
 8003810:	d144      	bne.n	800389c <__ieee754_fmod+0x114>
 8003812:	4a5f      	ldr	r2, [pc, #380]	@ (8003990 <__ieee754_fmod+0x208>)
 8003814:	463b      	mov	r3, r7
 8003816:	2b00      	cmp	r3, #0
 8003818:	dc3d      	bgt.n	8003896 <__ieee754_fmod+0x10e>
 800381a:	485e      	ldr	r0, [pc, #376]	@ (8003994 <__ieee754_fmod+0x20c>)
 800381c:	4281      	cmp	r1, r0
 800381e:	db4a      	blt.n	80038b6 <__ieee754_fmod+0x12e>
 8003820:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003824:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003828:	485a      	ldr	r0, [pc, #360]	@ (8003994 <__ieee754_fmod+0x20c>)
 800382a:	4282      	cmp	r2, r0
 800382c:	db57      	blt.n	80038de <__ieee754_fmod+0x156>
 800382e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8003832:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 8003836:	1a89      	subs	r1, r1, r2
 8003838:	1b98      	subs	r0, r3, r6
 800383a:	eba4 070e 	sub.w	r7, r4, lr
 800383e:	2900      	cmp	r1, #0
 8003840:	d162      	bne.n	8003908 <__ieee754_fmod+0x180>
 8003842:	4574      	cmp	r4, lr
 8003844:	bf38      	it	cc
 8003846:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800384a:	2800      	cmp	r0, #0
 800384c:	bfa4      	itt	ge
 800384e:	463c      	movge	r4, r7
 8003850:	4603      	movge	r3, r0
 8003852:	ea53 0104 	orrs.w	r1, r3, r4
 8003856:	d0c6      	beq.n	80037e6 <__ieee754_fmod+0x5e>
 8003858:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800385c:	db69      	blt.n	8003932 <__ieee754_fmod+0x1aa>
 800385e:	494d      	ldr	r1, [pc, #308]	@ (8003994 <__ieee754_fmod+0x20c>)
 8003860:	428a      	cmp	r2, r1
 8003862:	db6c      	blt.n	800393e <__ieee754_fmod+0x1b6>
 8003864:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8003868:	432b      	orrs	r3, r5
 800386a:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800386e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8003872:	4620      	mov	r0, r4
 8003874:	e7a9      	b.n	80037ca <__ieee754_fmod+0x42>
 8003876:	3901      	subs	r1, #1
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	e7c3      	b.n	8003804 <__ieee754_fmod+0x7c>
 800387c:	4945      	ldr	r1, [pc, #276]	@ (8003994 <__ieee754_fmod+0x20c>)
 800387e:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8003882:	2b00      	cmp	r3, #0
 8003884:	ddc0      	ble.n	8003808 <__ieee754_fmod+0x80>
 8003886:	3901      	subs	r1, #1
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	e7fa      	b.n	8003882 <__ieee754_fmod+0xfa>
 800388c:	ea4f 5128 	mov.w	r1, r8, asr #20
 8003890:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8003894:	e7b8      	b.n	8003808 <__ieee754_fmod+0x80>
 8003896:	3a01      	subs	r2, #1
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	e7bc      	b.n	8003816 <__ieee754_fmod+0x8e>
 800389c:	4a3d      	ldr	r2, [pc, #244]	@ (8003994 <__ieee754_fmod+0x20c>)
 800389e:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	ddb9      	ble.n	800381a <__ieee754_fmod+0x92>
 80038a6:	3a01      	subs	r2, #1
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	e7fa      	b.n	80038a2 <__ieee754_fmod+0x11a>
 80038ac:	ea4f 522c 	mov.w	r2, ip, asr #20
 80038b0:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80038b4:	e7b1      	b.n	800381a <__ieee754_fmod+0x92>
 80038b6:	1a40      	subs	r0, r0, r1
 80038b8:	281f      	cmp	r0, #31
 80038ba:	dc0a      	bgt.n	80038d2 <__ieee754_fmod+0x14a>
 80038bc:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 80038c0:	fa08 f800 	lsl.w	r8, r8, r0
 80038c4:	fa2a f303 	lsr.w	r3, sl, r3
 80038c8:	ea43 0308 	orr.w	r3, r3, r8
 80038cc:	fa0a f400 	lsl.w	r4, sl, r0
 80038d0:	e7aa      	b.n	8003828 <__ieee754_fmod+0xa0>
 80038d2:	4b31      	ldr	r3, [pc, #196]	@ (8003998 <__ieee754_fmod+0x210>)
 80038d4:	1a5b      	subs	r3, r3, r1
 80038d6:	fa0a f303 	lsl.w	r3, sl, r3
 80038da:	2400      	movs	r4, #0
 80038dc:	e7a4      	b.n	8003828 <__ieee754_fmod+0xa0>
 80038de:	1a80      	subs	r0, r0, r2
 80038e0:	281f      	cmp	r0, #31
 80038e2:	dc0a      	bgt.n	80038fa <__ieee754_fmod+0x172>
 80038e4:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 80038e8:	fa0c fc00 	lsl.w	ip, ip, r0
 80038ec:	fa27 f606 	lsr.w	r6, r7, r6
 80038f0:	ea46 060c 	orr.w	r6, r6, ip
 80038f4:	fa07 fe00 	lsl.w	lr, r7, r0
 80038f8:	e79d      	b.n	8003836 <__ieee754_fmod+0xae>
 80038fa:	4e27      	ldr	r6, [pc, #156]	@ (8003998 <__ieee754_fmod+0x210>)
 80038fc:	1ab6      	subs	r6, r6, r2
 80038fe:	fa07 f606 	lsl.w	r6, r7, r6
 8003902:	f04f 0e00 	mov.w	lr, #0
 8003906:	e796      	b.n	8003836 <__ieee754_fmod+0xae>
 8003908:	4574      	cmp	r4, lr
 800390a:	bf38      	it	cc
 800390c:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8003910:	2800      	cmp	r0, #0
 8003912:	da05      	bge.n	8003920 <__ieee754_fmod+0x198>
 8003914:	0fe0      	lsrs	r0, r4, #31
 8003916:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800391a:	0064      	lsls	r4, r4, #1
 800391c:	3901      	subs	r1, #1
 800391e:	e78b      	b.n	8003838 <__ieee754_fmod+0xb0>
 8003920:	ea50 0307 	orrs.w	r3, r0, r7
 8003924:	f43f af5f 	beq.w	80037e6 <__ieee754_fmod+0x5e>
 8003928:	0ffb      	lsrs	r3, r7, #31
 800392a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800392e:	007c      	lsls	r4, r7, #1
 8003930:	e7f4      	b.n	800391c <__ieee754_fmod+0x194>
 8003932:	0fe1      	lsrs	r1, r4, #31
 8003934:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8003938:	0064      	lsls	r4, r4, #1
 800393a:	3a01      	subs	r2, #1
 800393c:	e78c      	b.n	8003858 <__ieee754_fmod+0xd0>
 800393e:	1a89      	subs	r1, r1, r2
 8003940:	2914      	cmp	r1, #20
 8003942:	dc0a      	bgt.n	800395a <__ieee754_fmod+0x1d2>
 8003944:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8003948:	fa03 f202 	lsl.w	r2, r3, r2
 800394c:	40cc      	lsrs	r4, r1
 800394e:	4322      	orrs	r2, r4
 8003950:	410b      	asrs	r3, r1
 8003952:	ea43 0105 	orr.w	r1, r3, r5
 8003956:	4610      	mov	r0, r2
 8003958:	e737      	b.n	80037ca <__ieee754_fmod+0x42>
 800395a:	291f      	cmp	r1, #31
 800395c:	dc07      	bgt.n	800396e <__ieee754_fmod+0x1e6>
 800395e:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8003962:	40cc      	lsrs	r4, r1
 8003964:	fa03 f202 	lsl.w	r2, r3, r2
 8003968:	4322      	orrs	r2, r4
 800396a:	462b      	mov	r3, r5
 800396c:	e7f1      	b.n	8003952 <__ieee754_fmod+0x1ca>
 800396e:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8003972:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8003976:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800397a:	32e2      	adds	r2, #226	@ 0xe2
 800397c:	fa43 f202 	asr.w	r2, r3, r2
 8003980:	e7f3      	b.n	800396a <__ieee754_fmod+0x1e2>
 8003982:	bf00      	nop
 8003984:	7fefffff 	.word	0x7fefffff
 8003988:	7ff00000 	.word	0x7ff00000
 800398c:	080039c8 	.word	0x080039c8
 8003990:	fffffbed 	.word	0xfffffbed
 8003994:	fffffc02 	.word	0xfffffc02
 8003998:	fffffbe2 	.word	0xfffffbe2

0800399c <_init>:
 800399c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399e:	bf00      	nop
 80039a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039a2:	bc08      	pop	{r3}
 80039a4:	469e      	mov	lr, r3
 80039a6:	4770      	bx	lr

080039a8 <_fini>:
 80039a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039aa:	bf00      	nop
 80039ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ae:	bc08      	pop	{r3}
 80039b0:	469e      	mov	lr, r3
 80039b2:	4770      	bx	lr
